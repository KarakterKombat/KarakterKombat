{"version":3,"file":"static/js/217.a76926cc.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/ErrorOutline.js","components/taskDrawerContent.jsx","components/taskCard.jsx","components/tasks.jsx"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2M12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8\"\n}), 'ErrorOutline');","import { ErrorOutline } from \"@mui/icons-material\";\r\nimport { Alert, CircularProgress, LinearProgress } from \"@mui/material\";\r\nimport Grid from \"@mui/material/Unstable_Grid2\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst TaskDrawerContent = ({\r\n    task,\r\n    axios,\r\n    theme,\r\n    friendLength,\r\n    setSnackBar,\r\n    tasks,\r\n    setTasks,\r\n    setUpgradeDrawer,\r\n    setBalance,\r\n    balance,\r\n}) => {\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                padding: 4,\r\n            }}\r\n        >\r\n            <Grid marginTop={2} container=\"true\">\r\n                <Grid\r\n                    xs={12}\r\n                    display={\"flex\"}\r\n                    justifyContent={\"center\"}\r\n                    alignItems={\"center\"}\r\n                >\r\n                    <img\r\n                        height={\"70px\"}\r\n                        src=\"/assets/images/logo1.png\"\r\n                        alt=\"\"\r\n                    />\r\n                    <span style={{ fontSize: \"35px\" }}>\r\n                        {task.prize.length == 1\r\n                            ? task.prize[0]\r\n                            : task.prize[task.level]}\r\n                    </span>\r\n                </Grid>\r\n                {task.prize.length > 1 ? (\r\n                    <Grid\r\n                        xs={12}\r\n                        marginTop={3.5}\r\n                        display={\"flex\"}\r\n                        justifyContent={\"center\"}\r\n                    >\r\n                        <Grid\r\n                            container=\"true\"\r\n                            gap={1.1}\r\n                            maxWidth={\"70%\"}\r\n                            display={\"flex\"}\r\n                            justifyContent={\"center\"}\r\n                            alignItems={\"center\"}\r\n                        >\r\n                            {task.prize.map((item, index) => (\r\n                                <Grid\r\n                                    xs={3}\r\n                                    key={index}\r\n                                    className={\r\n                                        task.level - 1 < index\r\n                                            ? \"btn white\"\r\n                                            : `btn ${theme}`\r\n                                    }\r\n                                    width={\"30%\"}\r\n                                    padding={0.7}\r\n                                >\r\n                                    <img\r\n                                        height={\"35px\"}\r\n                                        src=\"/assets/images/logo1.png\"\r\n                                        alt=\"\"\r\n                                    />\r\n                                    <div style={{ marginTop: \"-.5rem\" }}>\r\n                                        {item.toLocaleString()}\r\n                                    </div>\r\n                                </Grid>\r\n                            ))}\r\n                        </Grid>\r\n                    </Grid>\r\n                ) : (\r\n                    \"\"\r\n                )}\r\n            </Grid>\r\n            <br />\r\n            <div\r\n                style={{\r\n                    letterSpacing: \"1px\",\r\n                }}\r\n            >\r\n                {task.description}\r\n                {task.type == 3 ? (\r\n                    <div>\r\n                        <center>\r\n                            <LinearProgress\r\n                                value={\r\n                                    (friendLength / task.data.minimum) * 100 >=\r\n                                    100\r\n                                        ? 100\r\n                                        : (friendLength / task.data.minimum) *\r\n                                          100\r\n                                }\r\n                                color={\r\n                                    (friendLength / task.data.minimum) * 100\r\n                                        ? \"warning\"\r\n                                        : \"success\"\r\n                                }\r\n                                variant=\"determinate\"\r\n                                style={{\r\n                                    maxWidth: \"20rem\",\r\n                                }}\r\n                            />\r\n                        </center>\r\n                        {/* <span\r\n                            style={{\r\n                                fontSize: \"1.5rem\",\r\n                            }}\r\n                        >{`${friendLength} / ${task.data.minimum}`}</span> */}\r\n                    </div>\r\n                ) : (\r\n                    \"\"\r\n                )}\r\n                <br />\r\n                <Alert\r\n                    style={{ textAlign: \"start\" }}\r\n                    variant=\"outlined\"\r\n                    color=\"error\"\r\n                    icon={<ErrorOutline />}\r\n                >\r\n                    <span\r\n                        style={{\r\n                            color: \"white\",\r\n                            fontFamily: \"sans-serif\",\r\n                            fontSize: \"14px\",\r\n                        }}\r\n                    >\r\n                        <b>Attention</b>: Our system diligently reviews your\r\n                        claim history. Please refrain from making false claims;\r\n                        doing so will result in a <b>twofold</b> reduction of\r\n                        your account balance.\r\n                    </span>\r\n                </Alert>\r\n            </div>\r\n            <br />\r\n            <button\r\n                className={\r\n                    task.claimed || loading ? \"btn white\" : `btn ${theme}`\r\n                }\r\n                onClick={() => {\r\n                    setLoading(true);\r\n                    axios\r\n                        .post(\"/task/submit\", {\r\n                            id: task.id,\r\n                        })\r\n                        .then(({ data }) => {\r\n                            const index = tasks.findIndex(\r\n                                (item) => item.id == task.id\r\n                            );\r\n                            tasks[index].claimed = true;\r\n                            const newTasks = [...tasks];\r\n                            if (tasks[index].level) {\r\n                                newTasks[index].level += 1;\r\n                                setTasks(newTasks);\r\n                            }\r\n                            setSnackBar([\"Task completed.\", \"success\", true]);\r\n                            setUpgradeDrawer([false]);\r\n                            setBalance(\r\n                                balance +\r\n                                    task.prize[\r\n                                        task.type != 2 ? 0 : task.level - 1\r\n                                    ]\r\n                            );\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log(error);\r\n                            if (error.response?.reset) {\r\n                                const index = tasks.findIndex(\r\n                                    (item) => item.id == task.id\r\n                                );\r\n                                const newTasks = [...tasks];\r\n                                newTasks[index].level = 0;\r\n                                setTasks(newTasks);\r\n                            }\r\n                            if (\r\n                                error.response?.status == 409 &&\r\n                                error.response?.data?.status\r\n                            ) {\r\n                                const index = tasks.findIndex(\r\n                                    (item) => item.id == task.id\r\n                                );\r\n                                const newTasks = [...tasks];\r\n                                newTasks[index].claimed = true;\r\n                                setTasks(newTasks);\r\n                            }\r\n                            setSnackBar([\r\n                                error.response?.data?.message ||\r\n                                    \"Error fetching data. Plese check your connection.\",\r\n                                \"error\",\r\n                                true,\r\n                            ]);\r\n                        })\r\n                        .finally(() => {\r\n                            setLoading(false);\r\n                        });\r\n                }}\r\n                style={{\r\n                    padding: \"10px\",\r\n                    color: \"white\",\r\n                    fontSize: \"30px\",\r\n                    fontFamily: \"mortal-kombat\",\r\n                    marginBottom: \"7px\",\r\n                    textAlign: \"center\",\r\n                }}\r\n                disabled={\r\n                    loading ||\r\n                    task.claimed ||\r\n                    (task.type == 3 && task.data.minimum > friendLength)\r\n                }\r\n            >\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                    }}\r\n                >\r\n                    {loading ? <CircularProgress /> : \"\"}\r\n                    <span\r\n                        style={\r\n                            loading\r\n                                ? {\r\n                                      marginLeft: \"8px\",\r\n                                  }\r\n                                : {}\r\n                        }\r\n                    >\r\n                        {loading\r\n                            ? \"Fetching data\"\r\n                            : task.type == 3 && task.data.minimum > friendLength\r\n                            ? `${friendLength} / ${task.data.minimum}`\r\n                            : task.claimed\r\n                            ? \"Claimed\"\r\n                            : \"Claim\"}\r\n                    </span>\r\n                </div>\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TaskDrawerContent;\r\n","import Grid from \"@mui/material/Unstable_Grid2\";\r\nimport React from \"react\";\r\nimport TaskDrawerContent from \"./taskDrawerContent\";\r\n\r\nconst TaskCard = ({\r\n    task,\r\n    setUpgradeDrawer,\r\n    theme,\r\n    axios,\r\n    friendLength,\r\n    setSnackBar,\r\n    tasks,\r\n    setTasks,\r\n    setBalance,\r\n    balance,\r\n}) => {\r\n    const telegram = window.Telegram.WebApp;\r\n    return (\r\n        <Grid xs={12}>\r\n            <Grid\r\n                container=\"true\"\r\n                sx={{\r\n                    background: \"rgba(50, 50, 50, 0.20)\",\r\n                    borderRadius: \"10px\",\r\n                    boxShadow: \"0 4px 30px rgba( 25, 25, 25, 0.8)\",\r\n                    backdropFilter: \"blur(3px)\",\r\n                    WebkitBackdropFilter: \"blur(3px)\",\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    padding: 0.3,\r\n                    border: \"1px solid \" + (task.claimed ? \"white\" : theme),\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                }}\r\n            >\r\n                <Grid\r\n                    xs={3}\r\n                    sx={{\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                    }}\r\n                >\r\n                    <img height={\"60rem\"} src={task.image} alt=\"\" />\r\n                </Grid>\r\n                <Grid xs={5.7}>\r\n                    <span\r\n                        style={{\r\n                            textAlign: \"center\",\r\n                            fontSize: \"14px\",\r\n                            letterSpacing: \"1px\",\r\n                            // whiteSpace: \"nowrap\",\r\n                        }}\r\n                    >\r\n                        {task.title}\r\n                    </span>\r\n                </Grid>\r\n                <Grid xs={3}>\r\n                    <button\r\n                        className={task.claimed ? \"btn white\" : \"btn \" + theme}\r\n                        disabled={task.claimed && task.type != 2}\r\n                        onClick={() => {\r\n                            switch (task.type) {\r\n                                case 0:\r\n                                    telegram.openTelegramLink(task.data.url);\r\n                                    break;\r\n                                case 1:\r\n                                    telegram.openLink(task.data.url);\r\n                                    break;\r\n                            }\r\n                            setUpgradeDrawer([\r\n                                true,\r\n                                <TaskDrawerContent\r\n                                    setBalance={setBalance}\r\n                                    balance={balance}\r\n                                    setUpgradeDrawer={setUpgradeDrawer}\r\n                                    theme={theme}\r\n                                    setSnackBar={setSnackBar}\r\n                                    task={task}\r\n                                    friendLength={friendLength}\r\n                                    axios={axios}\r\n                                    tasks={tasks}\r\n                                    setTasks={setTasks}\r\n                                />,\r\n                            ]);\r\n                        }}\r\n                        style={{\r\n                            padding: \"7px 10px 7px 10px\",\r\n                            color: \"white\",\r\n                            fontWeight: 600,\r\n                            fontFamily: \"sans-serif\",\r\n                            letterSpacing: \"1px\",\r\n                            fontSize: \"1.05rem\",\r\n                        }}\r\n                    >\r\n                        {task.claimed\r\n                            ? \"Done\"\r\n                            : task.type == 3\r\n                            ? friendLength >= task.data.minimum\r\n                                ? \"Claim\"\r\n                                : `${friendLength} / ${task.data.minimum}`\r\n                            : task.type == 2\r\n                            ? \"Claim\"\r\n                            : \"Start\"}\r\n                    </button>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default TaskCard;\r\n","import Grid from \"@mui/material/Unstable_Grid2\";\r\nimport Particles from \"@tsparticles/react\";\r\nimport { useMemo, useState } from \"react\";\r\nimport TaskCard from \"./taskCard\";\r\nimport { Paper, Slide, SwipeableDrawer } from \"@mui/material\";\r\nimport { grey } from \"@mui/material/colors\";\r\nimport { TypeAnimation } from \"react-type-animation\";\r\n\r\nconst Tasks = ({\r\n    theme,\r\n    transition,\r\n    P,\r\n    colors,\r\n    friendLength,\r\n    axios,\r\n    setSnackBar,\r\n    setBalance,\r\n    balance,\r\n    tasks,\r\n    setTasks,\r\n}) => {\r\n    const Particle = useMemo(() => <Particles options={P} />, []);\r\n    const [upgradeDrawer, setUpgradeDrawer] = useState([false, <></>]);\r\n\r\n    return (\r\n        <div>\r\n            {Particle}\r\n            <Grid\r\n                container=\"true\"\r\n                sx={{\r\n                    height: \"100vh\",\r\n                    bottom: 0,\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    padding: \".7rem .7rem 5rem .7rem\",\r\n                    background: \"none\",\r\n                    backdropFilter: \"blur(0px)\",\r\n                    WebkitBackdropFilter: \"blur(0px)\",\r\n                    border: \"1px solid \" + colors[theme],\r\n                    boxShadow: \"inset 0 5px 20px \" + colors[theme],\r\n                    zIndex: 1,\r\n                    overflow: \"hidden\",\r\n                }}\r\n            >\r\n                <Slide\r\n                    in={transition}\r\n                    style={{ position: \"fixed\", top: 0, zIndex: 2 }}\r\n                >\r\n                    <Paper\r\n                        elevation={12}\r\n                        sx={{\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                            justifyContent: \"center\",\r\n                            background: grey[900],\r\n                            width: \"100%\",\r\n                            borderBottom: \"1px solid \" + theme,\r\n                        }}\r\n                    >\r\n                        <h1\r\n                            style={{\r\n                                width: \"100%\",\r\n                                fontSize: 30,\r\n                                textAlign: \"center\",\r\n                            }}\r\n                        >\r\n                            <span style={{ color: theme }}>\r\n                                <TypeAnimation\r\n                                    sequence={[\r\n                                        \"Explore\",\r\n                                        1500,\r\n                                        \"Earn\",\r\n                                        1500,\r\n                                        \"Level-up\",\r\n                                        1500,\r\n                                    ]}\r\n                                    repeat={Infinity}\r\n                                    speed={10}\r\n                                    deletionSpeed={10}\r\n                                />\r\n                            </span>\r\n                            !\r\n                        </h1>\r\n                    </Paper>\r\n                </Slide>\r\n                <Paper\r\n                    sx={{\r\n                        background: \"rgba(50, 50, 50, 0.20)\",\r\n                        borderRadius: \"10px\",\r\n                        boxShadow: \"0 4px 30px rgba( 25, 25, 25, 0.8)\",\r\n                        backdropFilter: \"blur(2px)\",\r\n                        WebkitBackdropFilter: \"blur(2px)\",\r\n                        width: \"100%\",\r\n                        height: \"87%\",\r\n                        padding: 1.2,\r\n                        border: \"1px solid \" + theme,\r\n                        marginTop: \"5.5rem\",\r\n                        overflow: \"auto\",\r\n                    }}\r\n                >\r\n                    <Grid container=\"true\" rowGap={1.2} width=\"100%\">\r\n                        {tasks.map((task, index) => (\r\n                            <TaskCard\r\n                                setBalance={setBalance}\r\n                                balance={balance}\r\n                                tasks={tasks}\r\n                                setTasks={setTasks}\r\n                                setSnackBar={setSnackBar}\r\n                                key={index}\r\n                                axios={axios}\r\n                                task={task}\r\n                                setUpgradeDrawer={setUpgradeDrawer}\r\n                                theme={theme}\r\n                                friendLength={friendLength}\r\n                            />\r\n                        ))}\r\n                    </Grid>\r\n                </Paper>\r\n                <SwipeableDrawer\r\n                    keepMounted\r\n                    PaperProps={{\r\n                        sx: {\r\n                            background: grey[900],\r\n                            borderRadius: \"12px 12px 0 0\",\r\n                            boxShadow: `0 -3px 18px rgb(${colors[theme]})`,\r\n                            borderTop: `1px solid rgb(${colors[theme]})`,\r\n                            textAlign: \"center\",\r\n                            padding: \"5px\",\r\n                            paddingBottom: \"0px\",\r\n                        },\r\n                    }}\r\n                    slotProps={{\r\n                        backdrop: {\r\n                            sx: { bgcolor: \"rgba(15, 15, 15, .90)\" },\r\n                        },\r\n                    }}\r\n                    anchor=\"bottom\"\r\n                    sx={{ zIndex: 999999 }}\r\n                    allowSwipeInChildren={true}\r\n                    disableSwipeToOpen={true}\r\n                    open={upgradeDrawer[0]}\r\n                    onOpen={() => {}}\r\n                    title=\"Upgrade\"\r\n                    onClose={() => {\r\n                        setUpgradeDrawer([false, <></>]);\r\n                    }}\r\n                >\r\n                    {upgradeDrawer[1]}\r\n                </SwipeableDrawer>\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Tasks;\r\n"],"names":["createSvgIcon","_jsx","d","_ref","task","axios","theme","friendLength","setSnackBar","tasks","setTasks","setUpgradeDrawer","setBalance","balance","loading","setLoading","useState","_jsxs","style","padding","children","Grid","marginTop","container","xs","display","justifyContent","alignItems","height","src","alt","fontSize","prize","length","level","gap","maxWidth","map","item","index","className","concat","width","toLocaleString","letterSpacing","description","type","LinearProgress","value","data","minimum","color","variant","Alert","textAlign","icon","ErrorOutline","fontFamily","claimed","onClick","post","id","then","_ref2","findIndex","newTasks","catch","error","_error$response","_error$response2","_error$response3","_error$response3$data","_error$response4","_error$response4$data","console","log","response","reset","status","message","finally","marginBottom","disabled","CircularProgress","marginLeft","telegram","window","Telegram","WebApp","sx","background","borderRadius","boxShadow","backdropFilter","WebkitBackdropFilter","border","image","title","openTelegramLink","url","openLink","TaskDrawerContent","fontWeight","transition","P","colors","Particle","useMemo","Particles","options","upgradeDrawer","_Fragment","bottom","zIndex","overflow","Slide","in","position","top","Paper","elevation","grey","borderBottom","TypeAnimation","sequence","repeat","Infinity","speed","deletionSpeed","rowGap","TaskCard","SwipeableDrawer","keepMounted","PaperProps","borderTop","paddingBottom","slotProps","backdrop","bgcolor","anchor","allowSwipeInChildren","disableSwipeToOpen","open","onOpen","onClose"],"sourceRoot":""}