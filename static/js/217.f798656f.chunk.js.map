{"version":3,"file":"static/js/217.f798656f.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/ErrorOutline.js","components/taskDrawerContent.jsx","components/taskCard.jsx","components/tasks.jsx"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2M12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8\"\n}), 'ErrorOutline');","import { ErrorOutline } from \"@mui/icons-material\";\r\nimport { Alert, CircularProgress, LinearProgress } from \"@mui/material\";\r\nimport { grey } from \"@mui/material/colors\";\r\nimport Grid from \"@mui/material/Unstable_Grid2\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst TaskDrawerContent = ({\r\n    task,\r\n    axios,\r\n    theme,\r\n    friendLength,\r\n    setSnackBar,\r\n    tasks,\r\n    setTasks,\r\n    setUpgradeDrawer,\r\n    setBalance,\r\n    balance,\r\n}) => {\r\n    const [loading, setLoading] = useState(false);\r\n    const mapped_tasks = (\r\n        <Grid\r\n            xs={12}\r\n            marginTop={3.5}\r\n            display={\"flex\"}\r\n            justifyContent={\"center\"}\r\n        >\r\n            <Grid\r\n                container=\"true\"\r\n                gap={1.1}\r\n                maxWidth={\"100%\"}\r\n                display={\"flex\"}\r\n                justifyContent={\"center\"}\r\n                alignItems={\"center\"}\r\n            >\r\n                {task.prize.map((item, index) => (\r\n                    <Grid\r\n                        xs={3}\r\n                        key={index}\r\n                        className={\r\n                            task.level - 1 < index\r\n                                ? task.level == index\r\n                                    ? \"btn white blink\"\r\n                                    : \"btn grey\"\r\n                                : `btn white`\r\n                        }\r\n                        width={\"20%\"}\r\n                        padding={0.7}\r\n                    >\r\n                        <img\r\n                            height={\"35px\"}\r\n                            src=\"/assets/images/logo1.png\"\r\n                            alt=\"\"\r\n                        />\r\n                        <div\r\n                            style={{\r\n                                marginTop: \"-.5rem\",\r\n                                fontFamily: \"mortal-kombat\",\r\n                                textDecoration:\r\n                                    task.level - 1 < index\r\n                                        ? \"unset\"\r\n                                        : \"line-through\",\r\n                                color:\r\n                                    task.level - 1 < index\r\n                                        ? \"white\"\r\n                                        : grey[400],\r\n                            }}\r\n                        >\r\n                            {item.toLocaleString()}\r\n                        </div>\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                padding: 4,\r\n            }}\r\n        >\r\n            <div hidden={true}>{mapped_tasks}</div>\r\n            <Grid marginTop={2} container=\"true\">\r\n                <Grid\r\n                    xs={12}\r\n                    display={\"flex\"}\r\n                    justifyContent={\"center\"}\r\n                    alignItems={\"center\"}\r\n                >\r\n                    <img\r\n                        height={\"70px\"}\r\n                        src=\"/assets/images/logo1.png\"\r\n                        alt=\"\"\r\n                    />\r\n                    <span style={{ fontSize: \"35px\" }}>\r\n                        {task.prize.length == 1\r\n                            ? task.prize[0]\r\n                            : task.prize[task.level]}\r\n                    </span>\r\n                </Grid>\r\n                {task.prize.length > 1 ? mapped_tasks : \"\"}\r\n            </Grid>\r\n            <br />\r\n            <div\r\n                style={{\r\n                    letterSpacing: \"1px\",\r\n                }}\r\n            >\r\n                {task.description}\r\n                {task.type == 3 ? (\r\n                    <div>\r\n                        <center>\r\n                            <LinearProgress\r\n                                value={\r\n                                    (friendLength / task.data.minimum) * 100 >=\r\n                                    100\r\n                                        ? 100\r\n                                        : (friendLength / task.data.minimum) *\r\n                                          100\r\n                                }\r\n                                color={\r\n                                    (friendLength / task.data.minimum) * 100\r\n                                        ? \"warning\"\r\n                                        : \"success\"\r\n                                }\r\n                                variant=\"determinate\"\r\n                                style={{\r\n                                    maxWidth: \"20rem\",\r\n                                }}\r\n                            />\r\n                        </center>\r\n                        {/* <span\r\n                            style={{\r\n                                fontSize: \"1.5rem\",\r\n                            }}\r\n                        >{`${friendLength} / ${task.data.minimum}`}</span> */}\r\n                    </div>\r\n                ) : (\r\n                    \"\"\r\n                )}\r\n                <br />\r\n                {task.type != 2 && (\r\n                    <Alert\r\n                        style={{ textAlign: \"start\" }}\r\n                        variant=\"outlined\"\r\n                        color=\"error\"\r\n                        icon={<ErrorOutline />}\r\n                    >\r\n                        <span\r\n                            style={{\r\n                                color: \"white\",\r\n                                fontFamily: \"sans-serif\",\r\n                                fontSize: \"14px\",\r\n                            }}\r\n                        >\r\n                            <b>Attention</b>: Our system diligently reviews your\r\n                            claim history. Please refrain from making false\r\n                            claims; doing so will result in a <b>twofold</b>{\" \"}\r\n                            reduction of your account balance.\r\n                        </span>\r\n                    </Alert>\r\n                )}\r\n            </div>\r\n            <br />\r\n            <button\r\n                className={\r\n                    task.claimed || loading ? \"btn white blink\" : `btn ${theme}`\r\n                }\r\n                onClick={() => {\r\n                    setLoading(true);\r\n                    axios\r\n                        .post(\"/task/submit\", {\r\n                            id: task.id,\r\n                        })\r\n                        .then(({ data }) => {\r\n                            const index = tasks.findIndex(\r\n                                (item) => item.id == task.id\r\n                            );\r\n                            setBalance(\r\n                                balance +\r\n                                    task.prize[task.type != 2 ? 0 : task.level]\r\n                            );\r\n                            tasks[index].claimed = true;\r\n                            const newTasks = [...tasks];\r\n                            if (tasks[index].level >= 0) {\r\n                                newTasks[index].level += 1;\r\n                                setTasks(newTasks);\r\n                            }\r\n                            setSnackBar([\"Task completed.\", \"success\", true]);\r\n                            setUpgradeDrawer([false]);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log(error);\r\n                            if (error.response?.reset) {\r\n                                const index = tasks.findIndex(\r\n                                    (item) => item.id == task.id\r\n                                );\r\n                                const newTasks = [...tasks];\r\n                                newTasks[index].level = 0;\r\n                                setTasks(newTasks);\r\n                            }\r\n                            if (\r\n                                error.response?.status == 409 &&\r\n                                error.response?.data?.status\r\n                            ) {\r\n                                const index = tasks.findIndex(\r\n                                    (item) => item.id == task.id\r\n                                );\r\n                                const newTasks = [...tasks];\r\n                                newTasks[index].claimed = true;\r\n                                setTasks(newTasks);\r\n                            }\r\n                            setSnackBar([\r\n                                error.response?.data?.message ||\r\n                                    \"Error fetching data. Plese check your connection.\",\r\n                                \"error\",\r\n                                true,\r\n                            ]);\r\n                        })\r\n                        .finally(() => {\r\n                            setLoading(false);\r\n                        });\r\n                }}\r\n                style={{\r\n                    padding: \"10px\",\r\n                    color: \"white\",\r\n                    fontSize: \"30px\",\r\n                    fontFamily: \"mortal-kombat\",\r\n                    marginBottom: \"7px\",\r\n                    textAlign: \"center\",\r\n                }}\r\n                disabled={\r\n                    loading ||\r\n                    task.claimed ||\r\n                    (task.type == 3 && task.data.minimum > friendLength)\r\n                }\r\n            >\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                    }}\r\n                >\r\n                    {loading ? <CircularProgress /> : \"\"}\r\n                    <span\r\n                        style={\r\n                            loading\r\n                                ? {\r\n                                      marginLeft: \"8px\",\r\n                                  }\r\n                                : {}\r\n                        }\r\n                    >\r\n                        {loading\r\n                            ? \"Fetching data\"\r\n                            : task.type == 3 && task.data.minimum > friendLength\r\n                            ? `${friendLength} / ${task.data.minimum}`\r\n                            : task.claimed\r\n                            ? \"Claimed\"\r\n                            : \"Claim\"}\r\n                    </span>\r\n                </div>\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TaskDrawerContent;\r\n","import Grid from \"@mui/material/Unstable_Grid2\";\r\nimport React from \"react\";\r\nimport TaskDrawerContent from \"./taskDrawerContent\";\r\nimport { grey } from \"@mui/material/colors\";\r\n\r\nconst TaskCard = ({\r\n    task,\r\n    setUpgradeDrawer,\r\n    theme,\r\n    axios,\r\n    friendLength,\r\n    setSnackBar,\r\n    tasks,\r\n    setTasks,\r\n    setBalance,\r\n    balance,\r\n    colors,\r\n}) => {\r\n    const telegram = window.Telegram.WebApp;\r\n    return (\r\n        <Grid\r\n            xs={12}\r\n            sx={{\r\n                backdropFilter: \"blur(4.5px)\",\r\n                WebkitBackdropFilter: \"blur(4.5px)\",\r\n            }}\r\n        >\r\n            <Grid\r\n                container=\"true\"\r\n                sx={{\r\n                    borderRadius: \"10px\",\r\n                    background: \"rgba(50, 50, 50, 0.20) !important\",\r\n                    boxShadow: \"0 4px 30px rgba( 25, 25, 25, 0.8) !important\",\r\n                    // border:\r\n                    //     \"1px solid \" +\r\n                    //     (task.claimed ? \"grey\" : `rgb(${colors[theme]})`),\r\n                    height: \"100%\",\r\n                    padding: \".5rem .1rem .5rem .1rem\",\r\n                    width: \"100%\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                }}\r\n                className={\r\n                    task.upcoming\r\n                        ? \"btn white blink\"\r\n                        : task.claimed\r\n                        ? \"btn grey\"\r\n                        : `btn ${theme}`\r\n                }\r\n            >\r\n                <Grid\r\n                    xs={3}\r\n                    sx={{\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                    }}\r\n                >\r\n                    <img\r\n                        height={\"55rem\"}\r\n                        style={{\r\n                            imageRendering: task.pixelated\r\n                                ? \"pixelated\"\r\n                                : \"auto\",\r\n                        }}\r\n                        src={task.image}\r\n                        alt=\"\"\r\n                    />\r\n                </Grid>\r\n                <Grid xs={5.7}>\r\n                    <span\r\n                        style={{\r\n                            textAlign: \"center\",\r\n                            fontSize: \"14px\",\r\n                            letterSpacing: \"1px\",\r\n                            textDecoration: task.claimed\r\n                                ? \"line-through\"\r\n                                : \"unset\",\r\n                            color: task.claimed ? grey[400] : \"white\",\r\n                        }}\r\n                    >\r\n                        {task.title}\r\n                    </span>\r\n                </Grid>\r\n                <Grid xs={3} display={\"flex\"} justifyContent={\"center\"}>\r\n                    <button\r\n                        className={\r\n                            task.upcoming\r\n                                ? \"btn white blink\"\r\n                                : task.claimed\r\n                                ? \"btn grey\"\r\n                                : \"btn \" + theme\r\n                        }\r\n                        disabled={\r\n                            (task.claimed || task.upcoming) && task.type != 2\r\n                        }\r\n                        onClick={() => {\r\n                            switch (task.type) {\r\n                                case 0:\r\n                                    telegram.openTelegramLink(task.data.url);\r\n                                    break;\r\n                                case 1:\r\n                                    telegram.openLink(task.data.url);\r\n                                    break;\r\n                            }\r\n                            setUpgradeDrawer([\r\n                                true,\r\n                                <TaskDrawerContent\r\n                                    setBalance={setBalance}\r\n                                    balance={balance}\r\n                                    setUpgradeDrawer={setUpgradeDrawer}\r\n                                    theme={theme}\r\n                                    setSnackBar={setSnackBar}\r\n                                    task={task}\r\n                                    friendLength={friendLength}\r\n                                    axios={axios}\r\n                                    tasks={tasks}\r\n                                    setTasks={setTasks}\r\n                                />,\r\n                            ]);\r\n                        }}\r\n                        style={{\r\n                            padding: \"7px 10px 7px 10px\",\r\n                            color: \"white\",\r\n                            fontWeight: 600,\r\n                            fontFamily: \"sans-serif\",\r\n                            letterSpacing: \"1px\",\r\n                            fontSize: \"1.05rem\",\r\n                        }}\r\n                    >\r\n                        {task.upcoming\r\n                            ? \"Soon...\"\r\n                            : task.claimed\r\n                            ? \"✅\"\r\n                            : task.type == 3\r\n                            ? friendLength >= task.data.minimum\r\n                                ? \"Claim\"\r\n                                : `${friendLength} / ${task.data.minimum}`\r\n                            : task.type == 2\r\n                            ? \"Claim\"\r\n                            : \"Start\"}\r\n                    </button>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default TaskCard;\r\n","import Grid from \"@mui/material/Unstable_Grid2\";\r\nimport Particles from \"@tsparticles/react\";\r\nimport { useMemo, useState } from \"react\";\r\nimport TaskCard from \"./taskCard\";\r\nimport { Fade, Paper, Slide, SwipeableDrawer } from \"@mui/material\";\r\nimport { grey } from \"@mui/material/colors\";\r\nimport { TypeAnimation } from \"react-type-animation\";\r\n\r\nconst Tasks = ({\r\n    theme,\r\n    transition,\r\n    P,\r\n    colors,\r\n    friendLength,\r\n    axios,\r\n    setSnackBar,\r\n    setBalance,\r\n    balance,\r\n    tasks,\r\n    setTasks,\r\n}) => {\r\n    const Particle = useMemo(() => <Particles options={P} />, []);\r\n    const [upgradeDrawer, setUpgradeDrawer] = useState([false, <></>]);\r\n\r\n    return (\r\n        <div>\r\n            {Particle}\r\n            <Grid\r\n                container=\"true\"\r\n                sx={{\r\n                    height: \"100vh\",\r\n                    bottom: 0,\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    padding: \".7rem .7rem 5rem .7rem\",\r\n                    background: \"none\",\r\n                    // backdropFilter: \"blur(1.5px)\",\r\n                    // WebkitBackdropFilter: \"blur(1.5px)\",\r\n                    border: `1px solid rgb(${colors[theme]})`,\r\n                    boxShadow: `inset 0 5px 20px rgb(${colors[theme]})`,\r\n                    zIndex: 1,\r\n                    overflow: \"hidden\",\r\n                }}\r\n            >\r\n                <Slide\r\n                    in={transition}\r\n                    style={{ position: \"fixed\", top: 0, zIndex: 2 }}\r\n                >\r\n                    <Paper\r\n                        elevation={12}\r\n                        sx={{\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                            justifyContent: \"center\",\r\n                            background: grey[900],\r\n                            width: \"100%\",\r\n                            borderBottom: `1px solid rgb(${colors[theme]})`,\r\n                        }}\r\n                    >\r\n                        <h1\r\n                            style={{\r\n                                width: \"100%\",\r\n                                fontSize: 30,\r\n                                textAlign: \"center\",\r\n                            }}\r\n                        >\r\n                            <span style={{ color: `rgb(${colors[theme]})` }}>\r\n                                <TypeAnimation\r\n                                    sequence={[\r\n                                        \"Explore\",\r\n                                        1500,\r\n                                        \"Earn\",\r\n                                        1500,\r\n                                        \"Level-up\",\r\n                                        1500,\r\n                                    ]}\r\n                                    repeat={Infinity}\r\n                                    speed={10}\r\n                                    deletionSpeed={10}\r\n                                />\r\n                            </span>\r\n                            !\r\n                        </h1>\r\n                    </Paper>\r\n                </Slide>\r\n                <Fade in={transition}>\r\n                    <Paper\r\n                        sx={{\r\n                            background: \"rgba(50, 50, 50, 0.20)\",\r\n                            borderRadius: \"10px\",\r\n                            boxShadow: \"0 4px 30px rgba( 25, 25, 25, 0.8)\",\r\n                            backdropFilter: \"blur(1.5px)\",\r\n                            WebkitBackdropFilter: \"blur(1.5px)\",\r\n                            width: \"100%\",\r\n                            height: \"87%\",\r\n                            padding: 1.5,\r\n                            border: `1px solid rgba(${colors[theme]}, 0.6)`,\r\n                            marginTop: \"5.5rem\",\r\n                            overflow: \"auto\",\r\n                        }}\r\n                    >\r\n                        <Grid container=\"true\" rowGap={1.2} width=\"100%\">\r\n                            {tasks.some(\r\n                                (task) => task.type == 2 && !task.upcoming\r\n                            ) ? (\r\n                                <span\r\n                                    style={{\r\n                                        color: \"white\",\r\n                                        fontSize: \"24px\",\r\n                                        textAlign: \"center\",\r\n                                        letterSpacing: \"2px\",\r\n                                        marginBottom: \"-0.6rem\",\r\n                                        marginTop: \"-.3rem\",\r\n                                    }}\r\n                                >\r\n                                    Daily Tasks\r\n                                </span>\r\n                            ) : (\r\n                                \"\"\r\n                            )}\r\n                            {tasks\r\n                                .filter(\r\n                                    (task) => task.type == 2 && !task.upcoming\r\n                                )\r\n                                .map((task, index) => (\r\n                                    <TaskCard\r\n                                        setBalance={setBalance}\r\n                                        balance={balance}\r\n                                        tasks={tasks}\r\n                                        setTasks={setTasks}\r\n                                        setSnackBar={setSnackBar}\r\n                                        key={index}\r\n                                        axios={axios}\r\n                                        task={task}\r\n                                        setUpgradeDrawer={setUpgradeDrawer}\r\n                                        colors={colors}\r\n                                        theme={theme}\r\n                                        friendLength={friendLength}\r\n                                    />\r\n                                ))}\r\n                        </Grid>\r\n                        <Grid container=\"true\" rowGap={1.2} width=\"100%\">\r\n                            {tasks.some(\r\n                                (task) =>\r\n                                    task.type != 2 &&\r\n                                    !task.claimed &&\r\n                                    !task.upcoming\r\n                            ) ? (\r\n                                <span\r\n                                    style={{\r\n                                        color: \"white\",\r\n                                        fontSize: \"24px\",\r\n                                        textAlign: \"center\",\r\n                                        letterSpacing: \"2px\",\r\n                                        marginBottom: \"-0.6rem\",\r\n                                        marginTop: \"1.3rem\",\r\n                                    }}\r\n                                >\r\n                                    Other Tasks\r\n                                </span>\r\n                            ) : (\r\n                                \"\"\r\n                            )}\r\n                            {tasks\r\n                                .filter(\r\n                                    (task) =>\r\n                                        task.type != 2 &&\r\n                                        !task.claimed &&\r\n                                        !task.upcoming\r\n                                )\r\n                                .map((task, index) => (\r\n                                    <TaskCard\r\n                                        setBalance={setBalance}\r\n                                        balance={balance}\r\n                                        tasks={tasks}\r\n                                        setTasks={setTasks}\r\n                                        setSnackBar={setSnackBar}\r\n                                        key={index}\r\n                                        axios={axios}\r\n                                        task={task}\r\n                                        setUpgradeDrawer={setUpgradeDrawer}\r\n                                        colors={colors}\r\n                                        theme={theme}\r\n                                        friendLength={friendLength}\r\n                                    />\r\n                                ))}\r\n                        </Grid>\r\n                        <Grid container=\"true\" rowGap={1.2} width=\"100%\">\r\n                            {tasks.some(\r\n                                (task) => !!task.claimed && !task.upcoming\r\n                            ) ? (\r\n                                <span\r\n                                    style={{\r\n                                        color: \"white\",\r\n                                        fontSize: \"24px\",\r\n                                        textAlign: \"center\",\r\n                                        letterSpacing: \"2px\",\r\n                                        marginBottom: \"-0.6rem\",\r\n                                        marginTop: \"1.3rem\",\r\n                                    }}\r\n                                >\r\n                                    Completed Tasks\r\n                                </span>\r\n                            ) : (\r\n                                \"\"\r\n                            )}\r\n                            {tasks\r\n                                .filter(\r\n                                    (task) => !!task.claimed && !task.upcoming\r\n                                )\r\n                                .map((task, index) => (\r\n                                    <TaskCard\r\n                                        setBalance={setBalance}\r\n                                        balance={balance}\r\n                                        tasks={tasks}\r\n                                        setTasks={setTasks}\r\n                                        setSnackBar={setSnackBar}\r\n                                        key={index}\r\n                                        axios={axios}\r\n                                        task={task}\r\n                                        setUpgradeDrawer={setUpgradeDrawer}\r\n                                        colors={colors}\r\n                                        theme={theme}\r\n                                        friendLength={friendLength}\r\n                                    />\r\n                                ))}\r\n                        </Grid>\r\n                        <Grid container=\"true\" rowGap={1.2} width=\"100%\">\r\n                            {tasks.some((task) => !!task.upcoming) ? (\r\n                                <span\r\n                                    style={{\r\n                                        color: \"white\",\r\n                                        fontSize: \"24px\",\r\n                                        textAlign: \"center\",\r\n                                        letterSpacing: \"2px\",\r\n                                        marginBottom: \"-0.6rem\",\r\n                                        marginTop: \"1.3rem\",\r\n                                    }}\r\n                                >\r\n                                    Upcoming Tasks\r\n                                </span>\r\n                            ) : (\r\n                                \"\"\r\n                            )}\r\n                            {tasks\r\n                                .filter((task) => !!task.upcoming)\r\n                                .map((task, index) => (\r\n                                    <TaskCard\r\n                                        setBalance={setBalance}\r\n                                        balance={balance}\r\n                                        tasks={tasks}\r\n                                        setTasks={setTasks}\r\n                                        setSnackBar={setSnackBar}\r\n                                        key={index}\r\n                                        axios={axios}\r\n                                        task={task}\r\n                                        setUpgradeDrawer={setUpgradeDrawer}\r\n                                        colors={colors}\r\n                                        theme={theme}\r\n                                        friendLength={friendLength}\r\n                                    />\r\n                                ))}\r\n                        </Grid>\r\n                    </Paper>\r\n                </Fade>\r\n                <SwipeableDrawer\r\n                    keepMounted\r\n                    PaperProps={{\r\n                        sx: {\r\n                            background: grey[900],\r\n                            borderRadius: \"12px 12px 0 0\",\r\n                            boxShadow: `0 -3px 18px rgb(${colors[theme]})`,\r\n                            borderTop: `1px solid rgb(${colors[theme]})`,\r\n                            textAlign: \"center\",\r\n                            padding: \"5px\",\r\n                            paddingBottom: \"0px\",\r\n                        },\r\n                    }}\r\n                    slotProps={{\r\n                        backdrop: {\r\n                            sx: { bgcolor: \"rgba(15, 15, 15, .90)\" },\r\n                        },\r\n                    }}\r\n                    anchor=\"bottom\"\r\n                    sx={{ zIndex: 999999 }}\r\n                    allowSwipeInChildren={true}\r\n                    disableSwipeToOpen={true}\r\n                    open={upgradeDrawer[0]}\r\n                    onOpen={() => {}}\r\n                    title=\"Upgrade\"\r\n                    onClose={() => {\r\n                        setUpgradeDrawer([false, <></>]);\r\n                    }}\r\n                >\r\n                    {upgradeDrawer[1]}\r\n                </SwipeableDrawer>\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Tasks;\r\n"],"names":["createSvgIcon","_jsx","d","_ref","task","axios","theme","friendLength","setSnackBar","tasks","setTasks","setUpgradeDrawer","setBalance","balance","loading","setLoading","useState","mapped_tasks","Grid","xs","marginTop","display","justifyContent","children","container","gap","maxWidth","alignItems","prize","map","item","index","_jsxs","className","level","width","padding","height","src","alt","style","fontFamily","textDecoration","color","grey","toLocaleString","hidden","fontSize","length","letterSpacing","description","type","LinearProgress","value","data","minimum","variant","Alert","textAlign","icon","ErrorOutline","claimed","concat","onClick","post","id","then","_ref2","findIndex","newTasks","catch","error","_error$response","_error$response2","_error$response3","_error$response3$data","_error$response4","_error$response4$data","console","log","response","reset","status","message","finally","marginBottom","disabled","CircularProgress","marginLeft","colors","telegram","window","Telegram","WebApp","sx","backdropFilter","WebkitBackdropFilter","borderRadius","background","boxShadow","upcoming","imageRendering","pixelated","image","title","openTelegramLink","url","openLink","TaskDrawerContent","fontWeight","transition","P","Particle","useMemo","Particles","options","upgradeDrawer","_Fragment","bottom","border","zIndex","overflow","Slide","in","position","top","Paper","elevation","borderBottom","TypeAnimation","sequence","repeat","Infinity","speed","deletionSpeed","Fade","rowGap","some","filter","TaskCard","SwipeableDrawer","keepMounted","PaperProps","borderTop","paddingBottom","slotProps","backdrop","bgcolor","anchor","allowSwipeInChildren","disableSwipeToOpen","open","onOpen","onClose"],"sourceRoot":""}