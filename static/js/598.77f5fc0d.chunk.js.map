{"version":3,"file":"static/js/598.77f5fc0d.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/colors/yellow.js","components/upgradeCard.jsx","components/boosts.jsx","components/drawerContent.jsx"],"sourcesContent":["const yellow = {\n  50: '#fffde7',\n  100: '#fff9c4',\n  200: '#fff59d',\n  300: '#fff176',\n  400: '#ffee58',\n  500: '#ffeb3b',\n  600: '#fdd835',\n  700: '#fbc02d',\n  800: '#f9a825',\n  900: '#f57f17',\n  A100: '#ffff8d',\n  A200: '#ffff00',\n  A400: '#ffea00',\n  A700: '#ffd600'\n};\nexport default yellow;","import { Divider } from \"@mui/material\";\r\nimport { grey } from \"@mui/material/colors\";\r\nimport Grid from \"@mui/material/Unstable_Grid2/Grid2\";\r\n\r\nconst UpgradeCard = ({ theme, title, description, Icon, onClick }) => {\r\n    return (\r\n        <div\r\n            role=\"button\"\r\n            onClick={onClick}\r\n            style={{\r\n                padding: \"7.5px\",\r\n                backgroundColor: \"rgba(25,25,25,1)\",\r\n                boxShadow: `0 3px 10px ${theme}`,\r\n            }}\r\n            className={\"btn \" + theme}\r\n        >\r\n            <Grid container=\"true\">\r\n                <Grid xs={9}>\r\n                    <span style={{ fontSize: 22 }}>{title}</span>\r\n                    <br />\r\n                    <span style={{ fontSize: 12 }}>{description}</span>\r\n                    <br />\r\n                </Grid>\r\n                <Grid\r\n                    xs={3}\r\n                    display={\"flex\"}\r\n                    flexDirection={\"row\"}\r\n                    fontSize={20}\r\n                >\r\n                    <Divider\r\n                        orientation=\"vertical\"\r\n                        flexItem\r\n                        sx={{\r\n                            left: 0,\r\n                            borderColor: grey[300],\r\n                            borderRightWidth: 2,\r\n                        }}\r\n                    />\r\n                    <span\r\n                        style={{\r\n                            alignSelf: \"start\",\r\n                            justifySelf: \"end\",\r\n                            textAlign: \"center\",\r\n                            right: 15,\r\n                            fontSize: \"50px\",\r\n                            position: \"absolute\",\r\n                        }}\r\n                    >\r\n                        <img\r\n                            src={Icon}\r\n                            alt=\"\"\r\n                            height={\"54px\"}\r\n                            style={{\r\n                                mixBlendMode: \"difference\",\r\n                                filter: \"contrast(140%)\",\r\n                                background: \"tranparent\",\r\n                            }}\r\n                        />\r\n                    </span>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UpgradeCard;\r\n","import { Fade, Paper, Slide, SwipeableDrawer } from \"@mui/material\";\r\nimport \"./css/glass-button.css\";\r\nimport React, { useMemo, useRef, useState } from \"react\";\r\nimport { grey, lightBlue, orange, red, yellow } from \"@mui/material/colors\";\r\nimport Grid from \"@mui/material/Unstable_Grid2/Grid2\";\r\nimport { TypeAnimation } from \"react-type-animation\";\r\nimport UpgradeCard from \"./upgradeCard\";\r\nimport DrawerContent from \"./drawerContent\";\r\nimport useSound from \"use-sound\";\r\nimport Particles from \"@tsparticles/react\";\r\n\r\nconst Boosts = ({\r\n    transition,\r\n    theme,\r\n    setTheme,\r\n    coinsPerTap,\r\n    maxEnergy,\r\n    chargePerSecond,\r\n    colors,\r\n    prices,\r\n    axios,\r\n    setChargePerSecond,\r\n    setCoinsPerTap,\r\n    setSnackBar,\r\n    balance,\r\n    setBalance,\r\n    P,\r\n    setMaxEnergy,\r\n    settings,\r\n}) => {\r\n    const [textColor, setTextColor] = useState(orange[700]);\r\n    const [upgradeDrawer, setUpgradeDrawer] = useState([false, <></>]);\r\n    const logo = \"/assets/images/logo1.png\";\r\n    const click_sound = \"/assets/sounds/click1.mp3\";\r\n    const [playClickSound] = useSound(click_sound);\r\n    const Particle = useMemo(() => <Particles options={P} />, []);\r\n\r\n    return (\r\n        <div>\r\n            {Particle}\r\n            <Grid\r\n                sx={{\r\n                    height: \"100vh\",\r\n                    bottom: 0,\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    padding: \"1.2rem\",\r\n                    background: \"none\",\r\n                    backdropFilter: \"blur(0px)\",\r\n                    WebkitBackdropFilter: \"blur(0px)\",\r\n                    padding: 2,\r\n                    border: \"1px solid \" + colors[theme],\r\n                    boxShadow: \"inset 0 5px 20px \" + colors[theme],\r\n                    zIndex: 1,\r\n                }}\r\n                container=\"true\"\r\n            >\r\n                <Grid\r\n                    xs={12}\r\n                    width=\"100%\"\r\n                    height=\"14vh\"\r\n                    position={\"fixed\"}\r\n                    top={0}\r\n                >\r\n                    <Slide in={transition}>\r\n                        <Paper\r\n                            elevation={12}\r\n                            sx={{\r\n                                display: \"flex\",\r\n                                alignItems: \"center\",\r\n                                justifyContent: \"center\",\r\n                                background: grey[900],\r\n                                borderRadius: \"0\",\r\n                                width: \"100%\",\r\n                                borderBottom: \"1px solid \" + theme,\r\n                            }}\r\n                        >\r\n                            <h1\r\n                                style={{\r\n                                    width: \"100%\",\r\n                                    fontSize: 30,\r\n                                    textAlign: \"center\",\r\n                                }}\r\n                            >\r\n                                <Grid xs={12}>\r\n                                    <span>\r\n                                        <TypeAnimation\r\n                                            sequence={[\"Get Over Here...\"]}\r\n                                            repeat={0}\r\n                                            cursor={false}\r\n                                            speed={100}\r\n                                        />\r\n                                    </span>{\" \"}\r\n                                </Grid>\r\n                                <Grid xs={12}>\r\n                                    <span style={{ color: textColor }}>\r\n                                        <TypeAnimation\r\n                                            sequence={[\r\n                                                \"Power\",\r\n                                                1500,\r\n                                                () => {\r\n                                                    setTimeout(() => {\r\n                                                        setTextColor(red[600]);\r\n                                                    }, 450);\r\n                                                },\r\n                                                \"Strength\",\r\n                                                1500,\r\n                                                () => {\r\n                                                    setTimeout(() => {\r\n                                                        setTextColor(\r\n                                                            lightBlue[500]\r\n                                                        );\r\n                                                    }, 725);\r\n                                                },\r\n                                                \"Bi-Han\",\r\n                                                1500,\r\n                                                () => {\r\n                                                    setTimeout(() => {\r\n                                                        setTextColor(\r\n                                                            yellow[800]\r\n                                                        );\r\n                                                    }, 600);\r\n                                                },\r\n                                                \"Kuai Liang\",\r\n                                                1500,\r\n                                                () => {\r\n                                                    setTimeout(() => {\r\n                                                        setTextColor(\r\n                                                            orange[700]\r\n                                                        );\r\n                                                    }, 900);\r\n                                                },\r\n                                            ]}\r\n                                            repeat={Infinity}\r\n                                            speed={10}\r\n                                            deletionSpeed={10}\r\n                                        />\r\n                                    </span>\r\n                                    !\r\n                                </Grid>\r\n                            </h1>\r\n                        </Paper>\r\n                    </Slide>\r\n                </Grid>\r\n                <Grid\r\n                    xs={12}\r\n                    padding={2}\r\n                    paddingTop={3.5}\r\n                    paddingBottom={3.5}\r\n                    maxWidth={\"744px\"}\r\n                    marginTop={\"6.5rem\"}\r\n                    height={\"75vh\"}\r\n                    marginBottom={\"2rem\"}\r\n                >\r\n                    <Fade in={transition}>\r\n                        <Paper>\r\n                            <Slide in={transition} direction=\"left\">\r\n                                <div>\r\n                                    <UpgradeCard\r\n                                        Icon={\r\n                                            \"assets/images/icons/_7ae4a4ba-dc95-4342-96f7-416ccb4ab7c4.jpg\"\r\n                                        }\r\n                                        title={\"Koins per tap\"}\r\n                                        description={`+${coinsPerTap} | level ${coinsPerTap}`}\r\n                                        theme={theme}\r\n                                        onClick={() => {\r\n                                            if (settings.menuSounds)\r\n                                                playClickSound();\r\n                                            setUpgradeDrawer([\r\n                                                true,\r\n                                                <DrawerContent\r\n                                                    sounds={\r\n                                                        !settings.menuSounds\r\n                                                    }\r\n                                                    balance={balance}\r\n                                                    setUpgradeDrawer={\r\n                                                        setUpgradeDrawer\r\n                                                    }\r\n                                                    setBalance={setBalance}\r\n                                                    axios={axios}\r\n                                                    title={\"Koins per tap\"}\r\n                                                    maxEnergy={setMaxEnergy}\r\n                                                    setTheme={setTheme}\r\n                                                    chargePerSecond={\r\n                                                        setChargePerSecond\r\n                                                    }\r\n                                                    coinsPerTap={setCoinsPerTap}\r\n                                                    upgrade={[\r\n                                                        \"tap\",\r\n                                                        coinsPerTap,\r\n                                                    ]}\r\n                                                    price={prices.coinsPerTap}\r\n                                                    theme={theme}\r\n                                                    setSnackBar={setSnackBar}\r\n                                                    logo={logo}\r\n                                                >\r\n                                                    In the depths unseen, a\r\n                                                    slumbering wellspring hums\r\n                                                    with the song of wealth.\r\n                                                    Each click, a resonating\r\n                                                    chord that stirs its\r\n                                                    surface. The more persistent\r\n                                                    your touch, the stronger the\r\n                                                    melody, beckoning forth a\r\n                                                    greater bounty. Invest in\r\n                                                    the unseen symphony and\r\n                                                    unlock the secrets of untold\r\n                                                    riches.\r\n                                                </DrawerContent>,\r\n                                            ]);\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                            </Slide>\r\n                            <br />\r\n                            <Slide in={transition} direction=\"right\">\r\n                                <div>\r\n                                    <UpgradeCard\r\n                                        Icon={\r\n                                            \"assets/images/icons/_97bc1deb-5af8-42dc-86e1-570e73cde617.jpg\"\r\n                                        }\r\n                                        title={\"Energy tank\"}\r\n                                        description={`${\r\n                                            maxEnergy > 1024\r\n                                                ? format(maxEnergy / 1e3)\r\n                                                : maxEnergy\r\n                                        } | level ${maxEnergy / prices.energy}`}\r\n                                        theme={theme}\r\n                                        onClick={() => {\r\n                                            if (settings.menuSounds)\r\n                                                playClickSound();\r\n                                            setUpgradeDrawer([\r\n                                                true,\r\n                                                <DrawerContent\r\n                                                    sounds={\r\n                                                        !settings.menuSounds\r\n                                                    }\r\n                                                    axios={axios}\r\n                                                    balance={balance}\r\n                                                    setUpgradeDrawer={\r\n                                                        setUpgradeDrawer\r\n                                                    }\r\n                                                    setBalance={setBalance}\r\n                                                    title={\"Energy limit\"}\r\n                                                    theme={theme}\r\n                                                    setTheme={setTheme}\r\n                                                    setSnackBar={setSnackBar}\r\n                                                    logo={logo}\r\n                                                    maxEnergy={setMaxEnergy}\r\n                                                    chargePerSecond={\r\n                                                        setChargePerSecond\r\n                                                    }\r\n                                                    coinsPerTap={setCoinsPerTap}\r\n                                                    upgrade={[\r\n                                                        \"energy\",\r\n                                                        maxEnergy,\r\n                                                    ]}\r\n                                                    price={prices.energy}\r\n                                                >\r\n                                                    A shimmering tapestry\r\n                                                    stretches before you, woven\r\n                                                    from the threads of your\r\n                                                    will. Each click a strand,\r\n                                                    your energy the lifeblood\r\n                                                    that courses through it.\r\n                                                    Upgrades reinforce the\r\n                                                    tapestry's weave, allowing\r\n                                                    it to hold a greater bounty\r\n                                                    of will, extending your\r\n                                                    tireless tapping. Will you\r\n                                                    become the master weaver,\r\n                                                    your will a boundless\r\n                                                    wellspring of clicks?\r\n                                                </DrawerContent>,\r\n                                            ]);\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                            </Slide>\r\n                            <br />\r\n                            <Slide in={transition} direction=\"left\">\r\n                                <div>\r\n                                    <UpgradeCard\r\n                                        Icon={\r\n                                            \"assets/images/icons/_7f90b98e-1053-419c-982e-fc62ae774519.jpg\"\r\n                                        }\r\n                                        title={\"Charge speed\"}\r\n                                        description={`+${chargePerSecond} | level ${\r\n                                            chargePerSecond * 2\r\n                                        }`}\r\n                                        theme={theme}\r\n                                        onClick={() => {\r\n                                            if (settings.menuSounds)\r\n                                                playClickSound();\r\n                                            setUpgradeDrawer([\r\n                                                true,\r\n                                                <DrawerContent\r\n                                                    sounds={\r\n                                                        !!settings.menuSounds\r\n                                                    }\r\n                                                    axios={axios}\r\n                                                    setUpgradeDrawer={\r\n                                                        setUpgradeDrawer\r\n                                                    }\r\n                                                    balance={balance}\r\n                                                    setBalance={setBalance}\r\n                                                    title={\"Recharge speed\"}\r\n                                                    setTheme={setTheme}\r\n                                                    maxEnergy={setMaxEnergy}\r\n                                                    chargePerSecond={\r\n                                                        setChargePerSecond\r\n                                                    }\r\n                                                    coinsPerTap={setCoinsPerTap}\r\n                                                    setSnackBar={setSnackBar}\r\n                                                    upgrade={[\r\n                                                        \"charge\",\r\n                                                        chargePerSecond,\r\n                                                    ]}\r\n                                                    price={\r\n                                                        prices.chargePerSecond\r\n                                                    }\r\n                                                    theme={theme}\r\n                                                    logo={logo}\r\n                                                >\r\n                                                    In the whispering dunes of\r\n                                                    forgotten time, a slumbering\r\n                                                    hourglass awaits. Its sands,\r\n                                                    the essence of fleeting\r\n                                                    moments, hold the key to a\r\n                                                    swifter flow of fortune.\r\n                                                    Legends whisper of those who\r\n                                                    have tamed the sands, their\r\n                                                    whispers coaxing the grains\r\n                                                    to cascade with\r\n                                                    ever-increasing haste. Each\r\n                                                    upgrade a sigil etched upon\r\n                                                    the wind, a plea to the\r\n                                                    hourglass's spirit. Will you\r\n                                                    be the one to unravel the\r\n                                                    mysteries of time's flow and\r\n                                                    unlock a torrent of wealth?\r\n                                                    Invest in the secrets of the\r\n                                                    hourglass, and bend the very\r\n                                                    fabric of time to your will.\r\n                                                </DrawerContent>,\r\n                                            ]);\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                            </Slide>\r\n                        </Paper>\r\n                    </Fade>\r\n                </Grid>\r\n                <Grid>\r\n                    <SwipeableDrawer\r\n                        keepMounted\r\n                        PaperProps={{\r\n                            sx: {\r\n                                background: grey[900],\r\n                                borderRadius: \"12px 12px 0 0\",\r\n                                boxShadow: `0 -3px 18px rgb(${colors[theme]})`,\r\n                                borderTop: `1px solid rgb(${colors[theme]})`,\r\n                                textAlign: \"center\",\r\n                                padding: \"5px\",\r\n                                paddingBottom: \"0px\",\r\n                            },\r\n                        }}\r\n                        slotProps={{\r\n                            backdrop: {\r\n                                sx: { bgcolor: \"rgba(15, 15, 15, .90)\" },\r\n                            },\r\n                        }}\r\n                        anchor=\"bottom\"\r\n                        sx={{ zIndex: 999999 }}\r\n                        allowSwipeInChildren={true}\r\n                        disableSwipeToOpen={true}\r\n                        open={upgradeDrawer[0]}\r\n                        onOpen={() => {}}\r\n                        title=\"Upgrade\"\r\n                        onClose={() => {\r\n                            setUpgradeDrawer([false, <></>]);\r\n                        }}\r\n                    >\r\n                        {upgradeDrawer[1]}\r\n                    </SwipeableDrawer>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n\r\n    function format(number) {\r\n        const formatter = new Intl.NumberFormat(\"en\", {\r\n            notation: \"compact\",\r\n            compactDisplay: \"short\",\r\n            maximumSignificantDigits: 3,\r\n        });\r\n\r\n        return formatter.format(number);\r\n    }\r\n};\r\n\r\nexport default Boosts;\r\n","import { CircularProgress } from \"@mui/material\";\r\nimport Grid from \"@mui/material/Unstable_Grid2\";\r\nimport React, { useState } from \"react\";\r\nimport useSound from \"use-sound\";\r\n\r\nconst DrawerContent = ({\r\n    price,\r\n    theme,\r\n    children,\r\n    logo,\r\n    title,\r\n    upgrade,\r\n    axios,\r\n    setSnackBar,\r\n    setBalance,\r\n    balance,\r\n    setUpgradeDrawer,\r\n    chargePerSecond,\r\n    coinsPerTap,\r\n    maxEnergy,\r\n}) => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(false);\r\n    const upgrades = {\r\n        charge: \"chargePerSecond\",\r\n        tap: \"coinsPerTap\",\r\n        energy: \"energy\",\r\n    };\r\n    const click_sound = \"/assets/sounds/click2.mp3\";\r\n    const [playClickSound] = useSound(click_sound);\r\n    const details = {\r\n        price: Math.floor(\r\n            upgrade[0] == \"charge\"\r\n                ? 4 ** (upgrade[1] + price) * 1024\r\n                : 4 ** ((upgrade[1] + price) / price) * 1024\r\n        ),\r\n        whatToUpgrade: upgrades[upgrade[0]],\r\n    };\r\n    return (\r\n        <Grid\r\n            container=\"true\"\r\n            display={\"flex\"}\r\n            direction={\"row\"}\r\n            justifyContent={\"center\"}\r\n        >\r\n            <Grid>\r\n                <h1\r\n                    style={{\r\n                        top: 0,\r\n                    }}\r\n                >\r\n                    {title}\r\n                </h1>\r\n                <p\r\n                    style={{\r\n                        textAlign: \"start\",\r\n                        padding: \"6px\",\r\n                    }}\r\n                >\r\n                    {children}\r\n                </p>\r\n            </Grid>\r\n            <Grid\r\n                sx={{\r\n                    left: 0,\r\n                    right: 0,\r\n                    marginBottom: \".55rem\",\r\n                }}\r\n            >\r\n                <button\r\n                    className={`btn ${theme}`}\r\n                    style={{\r\n                        padding: \"10px\",\r\n                        color: \"#fff\",\r\n                    }}\r\n                    disabled={loading}\r\n                    onClick={onClick}\r\n                >\r\n                    <Grid\r\n                        style={{\r\n                            fontSize: \"30px\",\r\n                            fontFamily: \"mortal-kombat\",\r\n                        }}\r\n                        container=\"true\"\r\n                        display={\"flex\"}\r\n                        alignItems={\"center\"}\r\n                    >\r\n                        <Grid>\r\n                            {!loading ? (\r\n                                <img\r\n                                    src={logo}\r\n                                    alt=\"\"\r\n                                    height={\"52px\"}\r\n                                    width={\"52px\"}\r\n                                />\r\n                            ) : (\r\n                                <CircularProgress />\r\n                            )}\r\n                        </Grid>\r\n                        <Grid marginLeft={\".2rem\"}>\r\n                            {!loading ? (\r\n                                <span>\r\n                                    {format(\r\n                                        parseInt(details.price)\r\n                                    ).toLocaleString()}{\" \"}\r\n                                    Koins\r\n                                </span>\r\n                            ) : (\r\n                                <span>Fetching data</span>\r\n                            )}\r\n                        </Grid>\r\n                    </Grid>\r\n                </button>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n\r\n    function onClick() {\r\n        if (error) return setSnackBar([\"\", \"\", false]);\r\n\r\n        setLoading(true);\r\n        axios\r\n            .post(\"/upgrade/upgrade\", {\r\n                item: details.whatToUpgrade,\r\n            })\r\n            .then(({ data }) => {\r\n                setBalance(balance - parseInt(details.price));\r\n                setSnackBar([\"Upgraded successfully.\", \"success\", true, false]);\r\n                setUpgradeDrawer([false, <></>]);\r\n                eval(`${details.whatToUpgrade}(${data.result})`);\r\n                playClickSound();\r\n            })\r\n            .catch((error) => {\r\n                if (\r\n                    error.response &&\r\n                    error.response.data &&\r\n                    error.response.data.message == \"Insufficient balance.\"\r\n                ) {\r\n                    // setUpgradeDrawer([false, <></>]);\r\n                    return setSnackBar([\r\n                        \"Insufficient balance.\",\r\n                        \"error\",\r\n                        true,\r\n                    ]);\r\n                }\r\n                // setUpgradeDrawer([false, <></>]);\r\n                console.log(error);\r\n                setSnackBar([\"Error fetching data.\", \"error\", true]);\r\n            })\r\n            .finally(() => setLoading(false));\r\n    }\r\n\r\n    function format(number) {\r\n        const formatter = new Intl.NumberFormat(\"en\", {\r\n            notation: \"compact\",\r\n            compactDisplay: \"short\",\r\n            maximumSignificantDigits: 3,\r\n        });\r\n\r\n        return formatter.format(number);\r\n    }\r\n};\r\n\r\nexport default DrawerContent;\r\n"],"names":["A100","A200","A400","A700","_ref","theme","title","description","Icon","onClick","_jsx","role","style","padding","backgroundColor","boxShadow","concat","className","children","_jsxs","Grid","container","xs","fontSize","display","flexDirection","Divider","orientation","flexItem","sx","left","borderColor","grey","borderRightWidth","alignSelf","justifySelf","textAlign","right","position","src","alt","height","mixBlendMode","filter","background","transition","setTheme","coinsPerTap","maxEnergy","chargePerSecond","colors","prices","axios","setChargePerSecond","setCoinsPerTap","setSnackBar","balance","setBalance","P","setMaxEnergy","settings","textColor","setTextColor","useState","orange","upgradeDrawer","setUpgradeDrawer","_Fragment","logo","playClickSound","useSound","Particle","useMemo","Particles","options","bottom","justifyContent","alignItems","backdropFilter","WebkitBackdropFilter","border","zIndex","width","top","Slide","in","Paper","elevation","borderRadius","borderBottom","TypeAnimation","sequence","repeat","cursor","speed","color","setTimeout","red","lightBlue","yellow","Infinity","deletionSpeed","paddingTop","paddingBottom","maxWidth","marginTop","marginBottom","Fade","direction","UpgradeCard","menuSounds","DrawerContent","sounds","upgrade","price","number","Intl","NumberFormat","notation","compactDisplay","maximumSignificantDigits","format","energy","SwipeableDrawer","keepMounted","PaperProps","borderTop","slotProps","backdrop","bgcolor","anchor","allowSwipeInChildren","disableSwipeToOpen","open","onOpen","onClose","loading","setLoading","error","setError","upgrades","charge","tap","click_sound","details","Math","floor","whatToUpgrade","disabled","fontFamily","CircularProgress","marginLeft","parseInt","toLocaleString","post","item","then","_ref2","data","eval","result","catch","response","message","console","log","finally"],"sourceRoot":""}