{"version":3,"file":"static/js/217.7670f121.chunk.js","mappings":"4LAIA,SAAeA,EAAAA,EAAAA,IAA4BC,EAAAA,EAAAA,KAAK,OAAQ,CACtDC,EAAG,0KACD,gB,sDCAJ,MAqUA,EArU0BC,IAWnB,IAXoB,KACvBC,EAAI,MACJC,EAAK,MACLC,EAAK,aACLC,EAAY,YACZC,EAAW,MACXC,EAAK,SACLC,EAAQ,iBACRC,EAAgB,WAChBC,EAAU,QACVC,GACHV,EACG,MAAOW,EAASC,IAAcC,EAAAA,EAAAA,WAAS,GACjCC,GACFhB,EAAAA,EAAAA,KAACiB,EAAAA,EAAI,CACDC,GAAI,GACJC,UAAW,IACXC,QAAS,OACTC,eAAgB,SAASC,UAEzBtB,EAAAA,EAAAA,KAACiB,EAAAA,EAAI,CACDM,UAAU,OACVC,OAAQ,EACRC,UAAW,GACXC,SAAU,OACVN,QAAS,OACTC,eAAgB,SAChBM,WAAY,SAASL,SAEpBnB,EAAKyB,MAAMC,KAAI,CAACC,EAAMC,KACnB/B,EAAAA,EAAAA,KAACiB,EAAAA,EAAI,CACDC,GAAI,EAQJc,MAAO,MACPC,QAAS,GACTC,UAAW/B,EAAKgC,OAASJ,EAAQ,cAAgB,GACjDK,GAAI,CACAC,gBACI,qDACJC,iBAAkB,uBAClBC,mBAAoB,2BACpBC,eAAgB,oBAChBC,iBAAkB,yBAClBC,eAAgB,uBAChBC,OACIxC,EAAKgC,MAAQ,EAAIJ,EACX,kBACA,OACVa,aACIzC,EAAKgC,MAAQ,EAAIJ,EACX,kBACA,QACZT,UAEFuB,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACAV,GAAI,CACAC,gBACI,0CACJC,iBAAkB,YAClBC,mBACIpC,EAAKgC,MAAQ,EAAIJ,EACX,UACA,WACVS,eACIrC,EAAKgC,MAAQ,EAAIJ,EAAQ,QAAU,QACvCU,iBAAkB,cAClBC,eAAgB,YAChBV,MAAO,OACPe,OAAQ,OACRC,QAAS,GACX1B,SAAA,EAEFtB,EAAAA,EAAAA,KAAC8C,EAAAA,EAAG,CACA1B,QAAS,OACTC,eAAgB,SAChBY,QAAS,EACTG,GAAI,CAAC,EAAEd,UAEPtB,EAAAA,EAAAA,KAAA,OACI+C,OAAQ,OACRE,IAAI,2BACJC,IAAI,GACJC,MAAO,CACHhC,UAAW,aAIvBnB,EAAAA,EAAAA,KAAA,OACImD,MAAO,CACHhC,UAAW,SACXiC,WAAY,gBACZC,UAAW,SACXC,cAAe,MACfC,eACIpD,EAAKgC,MAAQ,EAAIJ,EACX,QACA,eACVyB,MACIrD,EAAKgC,MAAQ,EAAIJ,EACX,QACA0B,EAAAA,EAAK,MACjBnC,SAEDQ,EAAO,IACF4B,EAAO5B,GACPA,EAAK6B,uBA/Ed5B,SAwFzB,OACIc,EAAAA,EAAAA,MAAA,OACIM,MAAO,CACHlB,QAAS,GACXX,SAAA,EAEFtB,EAAAA,EAAAA,KAAA,OAAK4D,QAAQ,EAAKtC,SAAEN,KACpB6B,EAAAA,EAAAA,MAAC5B,EAAAA,EAAI,CAACE,UAAW,EAAGI,UAAU,OAAMD,SAAA,EAChCuB,EAAAA,EAAAA,MAAC5B,EAAAA,EAAI,CACDC,GAAI,GACJE,QAAS,OACTC,eAAgB,SAChBM,WAAY,SAASL,SAAA,EAErBtB,EAAAA,EAAAA,KAAA,OACI+C,OAAQ,OACRE,IAAI,2BACJC,IAAI,MAERlD,EAAAA,EAAAA,KAAA,QAAMmD,MAAO,CAAEU,SAAU,QAASvC,SACR,GAArBnB,EAAKyB,MAAMkC,OACN3D,EAAKyB,MAAM,GACXzB,EAAKyB,MAAMzB,EAAKgC,YAG7BhC,EAAKyB,MAAMkC,OAAS,EAAI9C,EAAe,OAE5ChB,EAAAA,EAAAA,KAAA,UACA6C,EAAAA,EAAAA,MAAA,OACIM,MAAO,CACHG,cAAe,OACjBhC,SAAA,CAEDnB,EAAK4D,YACQ,GAAb5D,EAAK6D,MACFhE,EAAAA,EAAAA,KAAA,OAAAsB,UACItB,EAAAA,EAAAA,KAAA,UAAAsB,UACItB,EAAAA,EAAAA,KAACiE,EAAAA,EAAc,CACXC,MACK5D,EAAeH,EAAKgE,KAAKC,QAAW,KACrC,IACM,IACC9D,EAAeH,EAAKgE,KAAKC,QAC1B,IAEVZ,MACKlD,EAAeH,EAAKgE,KAAKC,QAAW,IAC/B,UACA,UAEVC,QAAQ,cACRlB,MAAO,CACHzB,SAAU,eAW1B,IAEJ1B,EAAAA,EAAAA,KAAA,SACc,GAAbG,EAAK6D,OACFhE,EAAAA,EAAAA,KAACsE,EAAAA,EAAK,CACFnB,MAAO,CAAEE,UAAW,SACpBgB,QAAQ,WACRb,MAAM,QACNe,MAAMvE,EAAAA,EAAAA,KAACwE,EAAY,IAAIlD,UAEvBuB,EAAAA,EAAAA,MAAA,QACIM,MAAO,CACHK,MAAO,QACPJ,WAAY,aACZS,SAAU,QACZvC,SAAA,EAEFtB,EAAAA,EAAAA,KAAA,KAAAsB,SAAG,cAAa,2HAEkBtB,EAAAA,EAAAA,KAAA,KAAAsB,SAAG,YAAY,IAAI,8CAMrEtB,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACIkC,UACIrB,EACM,kBACAV,EAAKsE,QACL,WAAU,OAAAC,OACHrE,GAEjBsE,QAASA,KACL7D,GAAW,GACXV,EACKwE,KAAK,eAAgB,CAClBC,GAAI1E,EAAK0E,KAEZC,MAAKC,IAAe,IAAd,KAAEZ,GAAMY,EACX,MAAMhD,EAAQvB,EAAMwE,WACflD,GAASA,EAAK+C,IAAM1E,EAAK0E,KAE9BlE,EACIC,EACIT,EAAKyB,MAAmB,GAAbzB,EAAK6D,KAAY,EAAI7D,EAAKgC,QAE7C3B,EAAMuB,GAAO0C,SAAU,EACvB,MAAMQ,EAAW,IAAIzE,GACjBA,EAAMuB,GAAOI,OAAS,IACtB8C,EAASlD,GAAOI,OAAS,EACzB1B,EAASwE,IAEb1E,EAAY,CAAC,kBAAmB,WAAW,IAC3CG,EAAiB,EAAC,GAAO,IAE5BwE,OAAOC,IAAW,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAEd,GADAC,QAAQC,IAAIR,GACM,QAAlBC,EAAID,EAAMS,gBAAQ,IAAAR,GAAdA,EAAgBS,MAAO,CACvB,MAAM9D,EAAQvB,EAAMwE,WACflD,GAASA,EAAK+C,IAAM1E,EAAK0E,KAExBI,EAAW,IAAIzE,GACrByE,EAASlD,GAAOI,MAAQ,EACxB1B,EAASwE,EACb,CACA,GAC8B,MAAZ,QAAdI,EAAAF,EAAMS,gBAAQ,IAAAP,OAAA,EAAdA,EAAgBS,SACF,QADeR,EAC7BH,EAAMS,gBAAQ,IAAAN,GAAM,QAANC,EAAdD,EAAgBnB,YAAI,IAAAoB,GAApBA,EAAsBO,OACxB,CACE,MAAM/D,EAAQvB,EAAMwE,WACflD,GAASA,EAAK+C,IAAM1E,EAAK0E,KAExBI,EAAW,IAAIzE,GACrByE,EAASlD,GAAO0C,SAAU,EAC1BhE,EAASwE,EACb,CACA1E,EAAY,EACM,QAAdiF,EAAAL,EAAMS,gBAAQ,IAAAJ,GAAM,QAANC,EAAdD,EAAgBrB,YAAI,IAAAsB,OAAN,EAAdA,EAAsBM,UAClB,oDACJ,SACA,GACF,IAELC,SAAQ,KACLlF,GAAW,EAAM,GACnB,EAEVqC,MAAO,CACHlB,QAAS,OACTuB,MAAO,QACPK,SAAU,OACVT,WAAY,gBACZ6C,aAAc,MACd5C,UAAW,UAEf6C,SACIrF,GACAV,EAAKsE,SACS,GAAbtE,EAAK6D,MAAa7D,EAAKgE,KAAKC,QAAU9D,EAC1CgB,UAEDuB,EAAAA,EAAAA,MAAA,OACIM,MAAO,CACH/B,QAAS,OACTO,WAAY,UACdL,SAAA,CAEDT,GAAUb,EAAAA,EAAAA,KAACmG,EAAAA,EAAgB,IAAM,IAClCnG,EAAAA,EAAAA,KAAA,QACImD,MACItC,EACM,CACIuF,WAAY,OAEhB,CAAC,EACV9E,SAEAT,EACK,gBACa,GAAbV,EAAK6D,MAAa7D,EAAKgE,KAAKC,QAAU9D,EAAY,GAAAoE,OAC/CpE,EAAY,OAAAoE,OAAMvE,EAAKgE,KAAKC,SAC/BjE,EAAKsE,QACL,UACA,kBAO1B,SAASf,EAAO2C,GAMZ,OALkB,IAAIC,KAAKC,aAAa,KAAM,CAC1CC,SAAU,UACVC,eAAgB,QAChBC,yBAA0B,IAEbhD,OAAO2C,EAC5B,GCpLJ,EA/IiBnG,IAYV,IAZW,KACdC,EAAI,iBACJO,EAAgB,MAChBL,EAAK,MACLD,EAAK,aACLE,EAAY,YACZC,EAAW,MACXC,EAAK,SACLC,EAAQ,WACRE,EAAU,QACVC,EAAO,OACP+F,GACHzG,EACG,MAAM0G,EAAWC,OAAOC,SAASC,OACjC,OACI/G,EAAAA,EAAAA,KAACiB,EAAAA,EAAI,CACDC,GAAI,GACJkB,GAAI,CACA4E,eAAgB,cAChBC,qBAAsB,eACxB3F,UAEFuB,EAAAA,EAAAA,MAAC5B,EAAAA,EAAI,CACDM,UAAU,OACVa,GAAI,CACA8E,aAAc,OACdC,WAAY,oCACZC,UAAW,+CAIXrE,OAAQ,OACRd,QAAS,0BACTD,MAAO,OACPZ,QAAS,OACTC,eAAgB,SAChBM,WAAY,UAEhBO,UACI/B,EAAKkH,SACC,kBACAlH,EAAKsE,QACL,WAAU,OAAAC,OACHrE,GAChBiB,SAAA,EAEDtB,EAAAA,EAAAA,KAACiB,EAAAA,EAAI,CACDC,GAAI,EACJkB,GAAI,CACAhB,QAAS,OACTO,WAAY,UACdL,UAEFtB,EAAAA,EAAAA,KAAA,OACI+C,OAAQ,QACRI,MAAO,CACHT,eAAgBvC,EAAKmH,UACf,YACA,QAEVrE,IAAK9C,EAAKoH,MACVrE,IAAI,QAGZlD,EAAAA,EAAAA,KAACiB,EAAAA,EAAI,CAACC,GAAI,IAAII,UACVtB,EAAAA,EAAAA,KAAA,QACImD,MAAO,CACHE,UAAW,SACXQ,SAAU,OACVP,cAAe,MACfC,eAAgBpD,EAAKsE,QACf,eACA,QACNjB,MAAOrD,EAAKsE,QAAUhB,EAAAA,EAAK,KAAO,SACpCnC,SAEDnB,EAAKqH,WAGdxH,EAAAA,EAAAA,KAACiB,EAAAA,EAAI,CAACC,GAAI,EAAGE,QAAS,OAAQC,eAAgB,SAASC,UACnDtB,EAAAA,EAAAA,KAAA,UACIkC,UACI/B,EAAKkH,SACC,kBACAlH,EAAKsE,QACL,WACA,OAASpE,EAEnB6F,UACK/F,EAAKsE,SAAWtE,EAAKkH,WAA0B,GAAblH,EAAK6D,KAE5CW,QAASA,KACL,OAAQxE,EAAK6D,MACT,KAAK,EACD4C,EAASa,iBAAiBtH,EAAKgE,KAAKuD,KACpC,MACJ,KAAK,EACDd,EAASe,SAASxH,EAAKgE,KAAKuD,KAGpChH,EAAiB,EACb,GACAV,EAAAA,EAAAA,KAAC4H,EAAiB,CACdjH,WAAYA,EACZC,QAASA,EACTF,iBAAkBA,EAClBL,MAAOA,EACPE,YAAaA,EACbJ,KAAMA,EACNG,aAAcA,EACdF,MAAOA,EACPI,MAAOA,EACPC,SAAUA,KAEhB,EAEN0C,MAAO,CACHlB,QAAS,oBACTuB,MAAO,QACPqE,WAAY,IACZzE,WAAY,aACZE,cAAe,MACfO,SAAU,WACZvC,SAEDnB,EAAKkH,SACA,UACAlH,EAAKsE,QACL,SACa,GAAbtE,EAAK6D,KACL1D,GAAgBH,EAAKgE,KAAKC,QACtB,QAAO,GAAAM,OACJpE,EAAY,OAAAoE,OAAMvE,EAAKgE,KAAKC,SACtB,GAAbjE,EAAK6D,KACL,QACA,gBAIf,E,gECvIf,MA4SA,EA5Sc9D,IAYP,IAZQ,MACXG,EAAK,WACLyH,EAAU,EACVC,EAAC,OACDpB,EAAM,aACNrG,EAAY,MACZF,EAAK,YACLG,EAAW,WACXI,EAAU,QACVC,EAAO,MACPJ,EAAK,SACLC,GACHP,EACG,MAAM8H,GAAWC,EAAAA,EAAAA,UAAQ,KAAMjI,EAAAA,EAAAA,KAACkI,EAAAA,GAAS,CAACC,QAASJ,KAAO,KACnDK,EAAe1H,IAAoBK,EAAAA,EAAAA,UAAS,EAAC,GAAOf,EAAAA,EAAAA,KAAAqI,EAAAA,SAAA,MACrDzB,EAAWC,OAAOC,SAASC,OAC3BuB,GAAWC,EAAAA,EAAAA,MAOjB,OANA3B,EAAS4B,WAAWC,OACpB7B,EAAS4B,WAAW7D,SAAQ,KACxB2D,EAAS,eACT1B,EAAS4B,WAAWE,MAAM,KAI1B7F,EAAAA,EAAAA,MAAA,OAAAvB,SAAA,CACK0G,GACDnF,EAAAA,EAAAA,MAAC5B,EAAAA,EAAI,CACDM,UAAU,OACVa,GAAI,CACAW,OAAQ,QACR4F,OAAQ,EACRvH,QAAS,OACTC,eAAgB,SAChBY,QAAS,yBACTkF,WAAY,OAGZyB,OAAO,iBAADlE,OAAmBiC,EAAOtG,GAAM,KACtC+G,UAAU,wBAAD1C,OAA0BiC,EAAOtG,GAAM,KAChD2C,OAAQ,EACR6F,SAAU,UACZvH,SAAA,EAEFtB,EAAAA,EAAAA,KAAC8I,EAAAA,EAAK,CACFC,GAAIjB,EACJ3E,MAAO,CAAE6F,SAAU,QAASC,IAAK,EAAGjG,OAAQ,GAAI1B,UAEhDtB,EAAAA,EAAAA,KAACkJ,EAAAA,EAAK,CACFC,UAAW,GACX/G,GAAI,CACAhB,QAAS,OACTO,WAAY,SACZN,eAAgB,SAChB8F,WAAY1D,EAAAA,EAAK,KACjBzB,MAAO,OACPoH,aAAa,iBAAD1E,OAAmBiC,EAAOtG,GAAM,MAC9CiB,UAEFuB,EAAAA,EAAAA,MAAA,MACIM,MAAO,CACHnB,MAAO,OACP6B,SAAU,GACVR,UAAW,UACb/B,SAAA,EAEFtB,EAAAA,EAAAA,KAAA,QAAMmD,MAAO,CAAEK,MAAM,OAADkB,OAASiC,EAAOtG,GAAM,MAAMiB,UAC5CtB,EAAAA,EAAAA,KAACqJ,EAAAA,EAAa,CACVC,SAAU,CACN,UACA,KACA,OACA,KACA,WACA,MAEJC,OAAQC,IACRC,MAAO,GACPC,cAAe,OAEhB,YAKnB1J,EAAAA,EAAAA,KAAC2J,EAAAA,EAAI,CAACZ,GAAIjB,EAAWxG,UACjBuB,EAAAA,EAAAA,MAACqG,EAAAA,EAAK,CACF9G,GAAI,CACA+E,WAAY,yBACZD,aAAc,OACdE,UAAW,oCACXJ,eAAgB,cAChBC,qBAAsB,cACtBjF,MAAO,OACPe,OAAQ,MACRd,QAAS,IACT2G,OAAO,kBAADlE,OAAoBiC,EAAOtG,GAAM,UACvCc,UAAW,SACX0H,SAAU,QACZvH,SAAA,EAEFuB,EAAAA,EAAAA,MAAC5B,EAAAA,EAAI,CAACM,UAAU,OAAOC,OAAQ,IAAKQ,MAAM,OAAMV,SAAA,CAC3Cd,EAAMoJ,MACFzJ,GAAsB,GAAbA,EAAK6D,OAAc7D,EAAKkH,YAElCrH,EAAAA,EAAAA,KAAA,QACImD,MAAO,CACHK,MAAO,QACPK,SAAU,OACVR,UAAW,SACXC,cAAe,MACf2C,aAAc,UACd9E,UAAW,UACbG,SACL,gBAID,GAEHd,EACImC,QACIxC,GAAsB,GAAbA,EAAK6D,OAAc7D,EAAKkH,WAErCxF,KAAI,CAAC1B,EAAM4B,KACR/B,EAAAA,EAAAA,KAAC6J,EAAQ,CACLlJ,WAAYA,EACZC,QAASA,EACTJ,MAAOA,EACPC,SAAUA,EACVF,YAAaA,EAEbH,MAAOA,EACPD,KAAMA,EACNO,iBAAkBA,EAClBiG,OAAQA,EACRtG,MAAOA,EACPC,aAAcA,GANTyB,SAUrBc,EAAAA,EAAAA,MAAC5B,EAAAA,EAAI,CAACM,UAAU,OAAOC,OAAQ,IAAKQ,MAAM,OAAMV,SAAA,CAC3Cd,EAAMoJ,MACFzJ,GACgB,GAAbA,EAAK6D,OACJ7D,EAAKsE,UACLtE,EAAKkH,YAEVrH,EAAAA,EAAAA,KAAA,QACImD,MAAO,CACHK,MAAO,QACPK,SAAU,OACVR,UAAW,SACXC,cAAe,MACf2C,aAAc,UACd9E,UAAW,UACbG,SACL,gBAID,GAEHd,EACImC,QACIxC,GACgB,GAAbA,EAAK6D,OACJ7D,EAAKsE,UACLtE,EAAKkH,WAEbxF,KAAI,CAAC1B,EAAM4B,KACR/B,EAAAA,EAAAA,KAAC6J,EAAQ,CACLlJ,WAAYA,EACZC,QAASA,EACTJ,MAAOA,EACPC,SAAUA,EACVF,YAAaA,EAEbH,MAAOA,EACPD,KAAMA,EACNO,iBAAkBA,EAClBiG,OAAQA,EACRtG,MAAOA,EACPC,aAAcA,GANTyB,SAUrBc,EAAAA,EAAAA,MAAC5B,EAAAA,EAAI,CAACM,UAAU,OAAOC,OAAQ,IAAKQ,MAAM,OAAMV,SAAA,CAC3Cd,EAAMoJ,MACFzJ,KAAWA,EAAKsE,UAAYtE,EAAKkH,YAElCrH,EAAAA,EAAAA,KAAA,QACImD,MAAO,CACHK,MAAO,QACPK,SAAU,OACVR,UAAW,SACXC,cAAe,MACf2C,aAAc,UACd9E,UAAW,UACbG,SACL,oBAID,GAEHd,EACImC,QACIxC,KAAWA,EAAKsE,UAAYtE,EAAKkH,WAErCxF,KAAI,CAAC1B,EAAM4B,KACR/B,EAAAA,EAAAA,KAAC6J,EAAQ,CACLlJ,WAAYA,EACZC,QAASA,EACTJ,MAAOA,EACPC,SAAUA,EACVF,YAAaA,EAEbH,MAAOA,EACPD,KAAMA,EACNO,iBAAkBA,EAClBiG,OAAQA,EACRtG,MAAOA,EACPC,aAAcA,GANTyB,SAUrBc,EAAAA,EAAAA,MAAC5B,EAAAA,EAAI,CAACM,UAAU,OAAOC,OAAQ,IAAKQ,MAAM,OAAMV,SAAA,CAC3Cd,EAAMoJ,MAAMzJ,KAAWA,EAAKkH,YACzBrH,EAAAA,EAAAA,KAAA,QACImD,MAAO,CACHK,MAAO,QACPK,SAAU,OACVR,UAAW,SACXC,cAAe,MACf2C,aAAc,UACd9E,UAAW,UACbG,SACL,mBAID,GAEHd,EACImC,QAAQxC,KAAWA,EAAKkH,WACxBxF,KAAI,CAAC1B,EAAM4B,KACR/B,EAAAA,EAAAA,KAAC6J,EAAQ,CACLlJ,WAAYA,EACZC,QAASA,EACTJ,MAAOA,EACPC,SAAUA,EACVF,YAAaA,EAEbH,MAAOA,EACPD,KAAMA,EACNO,iBAAkBA,EAClBiG,OAAQA,EACRtG,MAAOA,EACPC,aAAcA,GANTyB,cAY7B/B,EAAAA,EAAAA,KAAC8J,EAAAA,EAAe,CACZC,aAAW,EACXC,WAAY,CACR5H,GAAI,CACA+E,WAAY1D,EAAAA,EAAK,KACjByD,aAAc,gBACdE,UAAU,mBAAD1C,OAAqBiC,EAAOtG,GAAM,KAC3C4J,UAAU,iBAADvF,OAAmBiC,EAAOtG,GAAM,KACzCgD,UAAW,SACXpB,QAAS,MACTiI,cAAe,QAGvBC,UAAW,CACPC,SAAU,CACNhI,GAAI,CAAEiI,QAAS,2BAGvBC,OAAO,SACPlI,GAAI,CAAEY,OAAQ,QACduH,sBAAsB,EACtBC,oBAAoB,EACpBC,KAAMrC,EAAc,GACpBsC,OAAQA,OACRlD,MAAM,UACNmD,QAASA,KACLjK,EAAiB,EAAC,GAAOV,EAAAA,EAAAA,KAAAqI,EAAAA,SAAA,KAAO,EAClC/G,SAED8G,EAAc,UAGrB,C","sources":["../node_modules/@mui/icons-material/esm/ErrorOutline.js","components/taskDrawerContent.jsx","components/taskCard.jsx","components/tasks.jsx"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2M12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8\"\n}), 'ErrorOutline');","import { ErrorOutline } from \"@mui/icons-material\";\r\nimport { Alert, Box, CircularProgress, LinearProgress } from \"@mui/material\";\r\nimport { grey } from \"@mui/material/colors\";\r\nimport Grid from \"@mui/material/Unstable_Grid2\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst TaskDrawerContent = ({\r\n    task,\r\n    axios,\r\n    theme,\r\n    friendLength,\r\n    setSnackBar,\r\n    tasks,\r\n    setTasks,\r\n    setUpgradeDrawer,\r\n    setBalance,\r\n    balance,\r\n}) => {\r\n    const [loading, setLoading] = useState(false);\r\n    const mapped_tasks = (\r\n        <Grid\r\n            xs={12}\r\n            marginTop={3.5}\r\n            display={\"flex\"}\r\n            justifyContent={\"center\"}\r\n        >\r\n            <Grid\r\n                container=\"true\"\r\n                rowGap={1}\r\n                columnGap={0.5}\r\n                maxWidth={\"100%\"}\r\n                display={\"flex\"}\r\n                justifyContent={\"center\"}\r\n                alignItems={\"center\"}\r\n            >\r\n                {task.prize.map((item, index) => (\r\n                    <Grid\r\n                        xs={3}\r\n                        key={index}\r\n                        // className={\r\n                        // task.level - 1 < index\r\n                        // ? task.level == index && \"btn white blink\"\r\n                        // : \"btn grey\"\r\n                        // : `btn white`\r\n                        // }\r\n                        width={\"20%\"}\r\n                        padding={0.4}\r\n                        className={task.level == index ? \"magic-blink\" : \"\"}\r\n                        sx={{\r\n                            backgroundImage:\r\n                                \"url(/assets/images/covers/purple-1.png) !important\",\r\n                            backgroundRepeat: \"no-repeat !important\",\r\n                            backgroundPosition: \"center center !important\",\r\n                            backgroundSize: \"4.6rem !important\",\r\n                            backgroundOrigin: \"padding-box !important\",\r\n                            imageRendering: \"pixelated !important\",\r\n                            filter:\r\n                                task.level - 1 < index\r\n                                    ? \"grayscale(100%)\"\r\n                                    : \"none\",\r\n                            WebkitFilter:\r\n                                task.level - 1 < index\r\n                                    ? \"grayscale(100%)\"\r\n                                    : \"none\",\r\n                        }}\r\n                    >\r\n                        <Box\r\n                            sx={{\r\n                                backgroundImage:\r\n                                    \"url(/assets/particles/purple-cloud.gif)\",\r\n                                backgroundRepeat: \"no-repeat\",\r\n                                backgroundPosition:\r\n                                    task.level - 1 < index\r\n                                        ? \"50% 85%\"\r\n                                        : \"51% 100%\",\r\n                                backgroundSize:\r\n                                    task.level - 1 < index ? \"10rem\" : \"12rem\",\r\n                                backgroundOrigin: \"padding-box\",\r\n                                imageRendering: \"pixelated\",\r\n                                width: \"100%\",\r\n                                height: \"100%\",\r\n                                zIndex: -1,\r\n                            }}\r\n                        >\r\n                            <Box\r\n                                display={\"flex\"}\r\n                                justifyContent={\"center\"}\r\n                                padding={1}\r\n                                sx={{}}\r\n                            >\r\n                                <img\r\n                                    height={\"40px\"}\r\n                                    src=\"/assets/images/logo1.png\"\r\n                                    alt=\"\"\r\n                                    style={{\r\n                                        marginTop: \"-5px\",\r\n                                    }}\r\n                                />\r\n                            </Box>\r\n                            <div\r\n                                style={{\r\n                                    marginTop: \"-.6rem\",\r\n                                    fontFamily: \"mortal-kombat\",\r\n                                    textAlign: \"center\",\r\n                                    letterSpacing: \"2px\",\r\n                                    textDecoration:\r\n                                        task.level - 1 < index\r\n                                            ? \"unset\"\r\n                                            : \"line-through\",\r\n                                    color:\r\n                                        task.level - 1 < index\r\n                                            ? \"white\"\r\n                                            : grey[200],\r\n                                }}\r\n                            >\r\n                                {item > 1000\r\n                                    ? format(item)\r\n                                    : item.toLocaleString()}\r\n                            </div>\r\n                        </Box>\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                padding: 4,\r\n            }}\r\n        >\r\n            <div hidden={true}>{mapped_tasks}</div>\r\n            <Grid marginTop={2} container=\"true\">\r\n                <Grid\r\n                    xs={12}\r\n                    display={\"flex\"}\r\n                    justifyContent={\"center\"}\r\n                    alignItems={\"center\"}\r\n                >\r\n                    <img\r\n                        height={\"70px\"}\r\n                        src=\"/assets/images/logo1.png\"\r\n                        alt=\"\"\r\n                    />\r\n                    <span style={{ fontSize: \"35px\" }}>\r\n                        {task.prize.length == 1\r\n                            ? task.prize[0]\r\n                            : task.prize[task.level]}\r\n                    </span>\r\n                </Grid>\r\n                {task.prize.length > 1 ? mapped_tasks : \"\"}\r\n            </Grid>\r\n            <br />\r\n            <div\r\n                style={{\r\n                    letterSpacing: \"1px\",\r\n                }}\r\n            >\r\n                {task.description}\r\n                {task.type == 3 ? (\r\n                    <div>\r\n                        <center>\r\n                            <LinearProgress\r\n                                value={\r\n                                    (friendLength / task.data.minimum) * 100 >=\r\n                                    100\r\n                                        ? 100\r\n                                        : (friendLength / task.data.minimum) *\r\n                                          100\r\n                                }\r\n                                color={\r\n                                    (friendLength / task.data.minimum) * 100\r\n                                        ? \"warning\"\r\n                                        : \"success\"\r\n                                }\r\n                                variant=\"determinate\"\r\n                                style={{\r\n                                    maxWidth: \"20rem\",\r\n                                }}\r\n                            />\r\n                        </center>\r\n                        {/* <span\r\n                            style={{\r\n                                fontSize: \"1.5rem\",\r\n                            }}\r\n                        >{`${friendLength} / ${task.data.minimum}`}</span> */}\r\n                    </div>\r\n                ) : (\r\n                    \"\"\r\n                )}\r\n                <br />\r\n                {task.type != 2 && (\r\n                    <Alert\r\n                        style={{ textAlign: \"start\" }}\r\n                        variant=\"outlined\"\r\n                        color=\"error\"\r\n                        icon={<ErrorOutline />}\r\n                    >\r\n                        <span\r\n                            style={{\r\n                                color: \"white\",\r\n                                fontFamily: \"sans-serif\",\r\n                                fontSize: \"14px\",\r\n                            }}\r\n                        >\r\n                            <b>Attention</b>: Our system diligently reviews your\r\n                            claim history. Please refrain from making false\r\n                            claims; doing so will result in a <b>twofold</b>{\" \"}\r\n                            reduction of your account balance.\r\n                        </span>\r\n                    </Alert>\r\n                )}\r\n            </div>\r\n            <br />\r\n            <button\r\n                className={\r\n                    loading\r\n                        ? \"btn white blink\"\r\n                        : task.claimed\r\n                        ? \"btn grey\"\r\n                        : `btn ${theme}`\r\n                }\r\n                onClick={() => {\r\n                    setLoading(true);\r\n                    axios\r\n                        .post(\"/task/submit\", {\r\n                            id: task.id,\r\n                        })\r\n                        .then(({ data }) => {\r\n                            const index = tasks.findIndex(\r\n                                (item) => item.id == task.id\r\n                            );\r\n                            setBalance(\r\n                                balance +\r\n                                    task.prize[task.type != 2 ? 0 : task.level]\r\n                            );\r\n                            tasks[index].claimed = true;\r\n                            const newTasks = [...tasks];\r\n                            if (tasks[index].level >= 0) {\r\n                                newTasks[index].level += 1;\r\n                                setTasks(newTasks);\r\n                            }\r\n                            setSnackBar([\"Task completed.\", \"success\", true]);\r\n                            setUpgradeDrawer([false]);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log(error);\r\n                            if (error.response?.reset) {\r\n                                const index = tasks.findIndex(\r\n                                    (item) => item.id == task.id\r\n                                );\r\n                                const newTasks = [...tasks];\r\n                                newTasks[index].level = 0;\r\n                                setTasks(newTasks);\r\n                            }\r\n                            if (\r\n                                error.response?.status == 409 &&\r\n                                error.response?.data?.status\r\n                            ) {\r\n                                const index = tasks.findIndex(\r\n                                    (item) => item.id == task.id\r\n                                );\r\n                                const newTasks = [...tasks];\r\n                                newTasks[index].claimed = true;\r\n                                setTasks(newTasks);\r\n                            }\r\n                            setSnackBar([\r\n                                error.response?.data?.message ||\r\n                                    \"Error fetching data. Plese check your connection.\",\r\n                                \"error\",\r\n                                true,\r\n                            ]);\r\n                        })\r\n                        .finally(() => {\r\n                            setLoading(false);\r\n                        });\r\n                }}\r\n                style={{\r\n                    padding: \"10px\",\r\n                    color: \"white\",\r\n                    fontSize: \"30px\",\r\n                    fontFamily: \"mortal-kombat\",\r\n                    marginBottom: \"7px\",\r\n                    textAlign: \"center\",\r\n                }}\r\n                disabled={\r\n                    loading ||\r\n                    task.claimed ||\r\n                    (task.type == 3 && task.data.minimum > friendLength)\r\n                }\r\n            >\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                    }}\r\n                >\r\n                    {loading ? <CircularProgress /> : \"\"}\r\n                    <span\r\n                        style={\r\n                            loading\r\n                                ? {\r\n                                      marginLeft: \"8px\",\r\n                                  }\r\n                                : {}\r\n                        }\r\n                    >\r\n                        {loading\r\n                            ? \"Fetching data\"\r\n                            : task.type == 3 && task.data.minimum > friendLength\r\n                            ? `${friendLength} / ${task.data.minimum}`\r\n                            : task.claimed\r\n                            ? \"Claimed\"\r\n                            : \"Claim\"}\r\n                    </span>\r\n                </div>\r\n            </button>\r\n        </div>\r\n    );\r\n\r\n    function format(number) {\r\n        const formatter = new Intl.NumberFormat(\"en\", {\r\n            notation: \"compact\",\r\n            compactDisplay: \"short\",\r\n            maximumSignificantDigits: 3,\r\n        });\r\n        return formatter.format(number);\r\n    }\r\n};\r\n\r\nexport default TaskDrawerContent;\r\n","import Grid from \"@mui/material/Unstable_Grid2\";\r\nimport React from \"react\";\r\nimport TaskDrawerContent from \"./taskDrawerContent\";\r\nimport { grey } from \"@mui/material/colors\";\r\n\r\nconst TaskCard = ({\r\n    task,\r\n    setUpgradeDrawer,\r\n    theme,\r\n    axios,\r\n    friendLength,\r\n    setSnackBar,\r\n    tasks,\r\n    setTasks,\r\n    setBalance,\r\n    balance,\r\n    colors,\r\n}) => {\r\n    const telegram = window.Telegram.WebApp;\r\n    return (\r\n        <Grid\r\n            xs={12}\r\n            sx={{\r\n                backdropFilter: \"blur(4.5px)\",\r\n                WebkitBackdropFilter: \"blur(4.5px)\",\r\n            }}\r\n        >\r\n            <Grid\r\n                container=\"true\"\r\n                sx={{\r\n                    borderRadius: \"10px\",\r\n                    background: \"rgba(50, 50, 50, 0.20) !important\",\r\n                    boxShadow: \"0 4px 30px rgba( 25, 25, 25, 0.8) !important\",\r\n                    // border:\r\n                    //     \"1px solid \" +\r\n                    //     (task.claimed ? \"grey\" : `rgb(${colors[theme]})`),\r\n                    height: \"100%\",\r\n                    padding: \".5rem .1rem .5rem .1rem\",\r\n                    width: \"100%\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                }}\r\n                className={\r\n                    task.upcoming\r\n                        ? \"btn white blink\"\r\n                        : task.claimed\r\n                        ? \"btn grey\"\r\n                        : `btn ${theme}`\r\n                }\r\n            >\r\n                <Grid\r\n                    xs={3}\r\n                    sx={{\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                    }}\r\n                >\r\n                    <img\r\n                        height={\"55rem\"}\r\n                        style={{\r\n                            imageRendering: task.pixelated\r\n                                ? \"pixelated\"\r\n                                : \"auto\",\r\n                        }}\r\n                        src={task.image}\r\n                        alt=\"\"\r\n                    />\r\n                </Grid>\r\n                <Grid xs={5.7}>\r\n                    <span\r\n                        style={{\r\n                            textAlign: \"center\",\r\n                            fontSize: \"14px\",\r\n                            letterSpacing: \"1px\",\r\n                            textDecoration: task.claimed\r\n                                ? \"line-through\"\r\n                                : \"unset\",\r\n                            color: task.claimed ? grey[400] : \"white\",\r\n                        }}\r\n                    >\r\n                        {task.title}\r\n                    </span>\r\n                </Grid>\r\n                <Grid xs={3} display={\"flex\"} justifyContent={\"center\"}>\r\n                    <button\r\n                        className={\r\n                            task.upcoming\r\n                                ? \"btn white blink\"\r\n                                : task.claimed\r\n                                ? \"btn grey\"\r\n                                : \"btn \" + theme\r\n                        }\r\n                        disabled={\r\n                            (task.claimed || task.upcoming) && task.type != 2\r\n                        }\r\n                        onClick={() => {\r\n                            switch (task.type) {\r\n                                case 0:\r\n                                    telegram.openTelegramLink(task.data.url);\r\n                                    break;\r\n                                case 1:\r\n                                    telegram.openLink(task.data.url);\r\n                                    break;\r\n                            }\r\n                            setUpgradeDrawer([\r\n                                true,\r\n                                <TaskDrawerContent\r\n                                    setBalance={setBalance}\r\n                                    balance={balance}\r\n                                    setUpgradeDrawer={setUpgradeDrawer}\r\n                                    theme={theme}\r\n                                    setSnackBar={setSnackBar}\r\n                                    task={task}\r\n                                    friendLength={friendLength}\r\n                                    axios={axios}\r\n                                    tasks={tasks}\r\n                                    setTasks={setTasks}\r\n                                />,\r\n                            ]);\r\n                        }}\r\n                        style={{\r\n                            padding: \"7px 10px 7px 10px\",\r\n                            color: \"white\",\r\n                            fontWeight: 600,\r\n                            fontFamily: \"sans-serif\",\r\n                            letterSpacing: \"1px\",\r\n                            fontSize: \"1.05rem\",\r\n                        }}\r\n                    >\r\n                        {task.upcoming\r\n                            ? \"Soon...\"\r\n                            : task.claimed\r\n                            ? \"✅\"\r\n                            : task.type == 3\r\n                            ? friendLength >= task.data.minimum\r\n                                ? \"Claim\"\r\n                                : `${friendLength} / ${task.data.minimum}`\r\n                            : task.type == 2\r\n                            ? \"Claim\"\r\n                            : \"Start\"}\r\n                    </button>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default TaskCard;\r\n","import Grid from \"@mui/material/Unstable_Grid2\";\r\nimport Particles from \"@tsparticles/react\";\r\nimport { useMemo, useState } from \"react\";\r\nimport TaskCard from \"./taskCard\";\r\nimport { Fade, Paper, Slide, SwipeableDrawer } from \"@mui/material\";\r\nimport { grey } from \"@mui/material/colors\";\r\nimport { TypeAnimation } from \"react-type-animation\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst Tasks = ({\r\n    theme,\r\n    transition,\r\n    P,\r\n    colors,\r\n    friendLength,\r\n    axios,\r\n    setSnackBar,\r\n    setBalance,\r\n    balance,\r\n    tasks,\r\n    setTasks,\r\n}) => {\r\n    const Particle = useMemo(() => <Particles options={P} />, []);\r\n    const [upgradeDrawer, setUpgradeDrawer] = useState([false, <></>]);\r\n    const telegram = window.Telegram.WebApp;\r\n    const navigate = useNavigate();\r\n    telegram.BackButton.show();\r\n    telegram.BackButton.onClick(() => {\r\n        navigate(\"/click-game\");\r\n        telegram.BackButton.hide();\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            {Particle}\r\n            <Grid\r\n                container=\"true\"\r\n                sx={{\r\n                    height: \"100vh\",\r\n                    bottom: 0,\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    padding: \".7rem .7rem 5rem .7rem\",\r\n                    background: \"none\",\r\n                    // backdropFilter: \"blur(1.5px)\",\r\n                    // WebkitBackdropFilter: \"blur(1.5px)\",\r\n                    border: `1px solid rgb(${colors[theme]})`,\r\n                    boxShadow: `inset 0 5px 20px rgb(${colors[theme]})`,\r\n                    zIndex: 1,\r\n                    overflow: \"hidden\",\r\n                }}\r\n            >\r\n                <Slide\r\n                    in={transition}\r\n                    style={{ position: \"fixed\", top: 0, zIndex: 2 }}\r\n                >\r\n                    <Paper\r\n                        elevation={12}\r\n                        sx={{\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                            justifyContent: \"center\",\r\n                            background: grey[900],\r\n                            width: \"100%\",\r\n                            borderBottom: `1px solid rgb(${colors[theme]})`,\r\n                        }}\r\n                    >\r\n                        <h1\r\n                            style={{\r\n                                width: \"100%\",\r\n                                fontSize: 30,\r\n                                textAlign: \"center\",\r\n                            }}\r\n                        >\r\n                            <span style={{ color: `rgb(${colors[theme]})` }}>\r\n                                <TypeAnimation\r\n                                    sequence={[\r\n                                        \"Explore\",\r\n                                        1500,\r\n                                        \"Earn\",\r\n                                        1500,\r\n                                        \"Level-up\",\r\n                                        1500,\r\n                                    ]}\r\n                                    repeat={Infinity}\r\n                                    speed={10}\r\n                                    deletionSpeed={10}\r\n                                />\r\n                            </span>\r\n                            !\r\n                        </h1>\r\n                    </Paper>\r\n                </Slide>\r\n                <Fade in={transition}>\r\n                    <Paper\r\n                        sx={{\r\n                            background: \"rgba(50, 50, 50, 0.20)\",\r\n                            borderRadius: \"10px\",\r\n                            boxShadow: \"0 4px 30px rgba( 25, 25, 25, 0.8)\",\r\n                            backdropFilter: \"blur(1.5px)\",\r\n                            WebkitBackdropFilter: \"blur(1.5px)\",\r\n                            width: \"100%\",\r\n                            height: \"87%\",\r\n                            padding: 1.5,\r\n                            border: `1px solid rgba(${colors[theme]}, 0.6)`,\r\n                            marginTop: \"5.5rem\",\r\n                            overflow: \"auto\",\r\n                        }}\r\n                    >\r\n                        <Grid container=\"true\" rowGap={1.2} width=\"100%\">\r\n                            {tasks.some(\r\n                                (task) => task.type == 2 && !task.upcoming\r\n                            ) ? (\r\n                                <span\r\n                                    style={{\r\n                                        color: \"white\",\r\n                                        fontSize: \"24px\",\r\n                                        textAlign: \"center\",\r\n                                        letterSpacing: \"2px\",\r\n                                        marginBottom: \"-0.6rem\",\r\n                                        marginTop: \"-.3rem\",\r\n                                    }}\r\n                                >\r\n                                    Daily Tasks\r\n                                </span>\r\n                            ) : (\r\n                                \"\"\r\n                            )}\r\n                            {tasks\r\n                                .filter(\r\n                                    (task) => task.type == 2 && !task.upcoming\r\n                                )\r\n                                .map((task, index) => (\r\n                                    <TaskCard\r\n                                        setBalance={setBalance}\r\n                                        balance={balance}\r\n                                        tasks={tasks}\r\n                                        setTasks={setTasks}\r\n                                        setSnackBar={setSnackBar}\r\n                                        key={index}\r\n                                        axios={axios}\r\n                                        task={task}\r\n                                        setUpgradeDrawer={setUpgradeDrawer}\r\n                                        colors={colors}\r\n                                        theme={theme}\r\n                                        friendLength={friendLength}\r\n                                    />\r\n                                ))}\r\n                        </Grid>\r\n                        <Grid container=\"true\" rowGap={1.2} width=\"100%\">\r\n                            {tasks.some(\r\n                                (task) =>\r\n                                    task.type != 2 &&\r\n                                    !task.claimed &&\r\n                                    !task.upcoming\r\n                            ) ? (\r\n                                <span\r\n                                    style={{\r\n                                        color: \"white\",\r\n                                        fontSize: \"24px\",\r\n                                        textAlign: \"center\",\r\n                                        letterSpacing: \"2px\",\r\n                                        marginBottom: \"-0.6rem\",\r\n                                        marginTop: \"1.3rem\",\r\n                                    }}\r\n                                >\r\n                                    Other Tasks\r\n                                </span>\r\n                            ) : (\r\n                                \"\"\r\n                            )}\r\n                            {tasks\r\n                                .filter(\r\n                                    (task) =>\r\n                                        task.type != 2 &&\r\n                                        !task.claimed &&\r\n                                        !task.upcoming\r\n                                )\r\n                                .map((task, index) => (\r\n                                    <TaskCard\r\n                                        setBalance={setBalance}\r\n                                        balance={balance}\r\n                                        tasks={tasks}\r\n                                        setTasks={setTasks}\r\n                                        setSnackBar={setSnackBar}\r\n                                        key={index}\r\n                                        axios={axios}\r\n                                        task={task}\r\n                                        setUpgradeDrawer={setUpgradeDrawer}\r\n                                        colors={colors}\r\n                                        theme={theme}\r\n                                        friendLength={friendLength}\r\n                                    />\r\n                                ))}\r\n                        </Grid>\r\n                        <Grid container=\"true\" rowGap={1.2} width=\"100%\">\r\n                            {tasks.some(\r\n                                (task) => !!task.claimed && !task.upcoming\r\n                            ) ? (\r\n                                <span\r\n                                    style={{\r\n                                        color: \"white\",\r\n                                        fontSize: \"24px\",\r\n                                        textAlign: \"center\",\r\n                                        letterSpacing: \"2px\",\r\n                                        marginBottom: \"-0.6rem\",\r\n                                        marginTop: \"1.3rem\",\r\n                                    }}\r\n                                >\r\n                                    Completed Tasks\r\n                                </span>\r\n                            ) : (\r\n                                \"\"\r\n                            )}\r\n                            {tasks\r\n                                .filter(\r\n                                    (task) => !!task.claimed && !task.upcoming\r\n                                )\r\n                                .map((task, index) => (\r\n                                    <TaskCard\r\n                                        setBalance={setBalance}\r\n                                        balance={balance}\r\n                                        tasks={tasks}\r\n                                        setTasks={setTasks}\r\n                                        setSnackBar={setSnackBar}\r\n                                        key={index}\r\n                                        axios={axios}\r\n                                        task={task}\r\n                                        setUpgradeDrawer={setUpgradeDrawer}\r\n                                        colors={colors}\r\n                                        theme={theme}\r\n                                        friendLength={friendLength}\r\n                                    />\r\n                                ))}\r\n                        </Grid>\r\n                        <Grid container=\"true\" rowGap={1.2} width=\"100%\">\r\n                            {tasks.some((task) => !!task.upcoming) ? (\r\n                                <span\r\n                                    style={{\r\n                                        color: \"white\",\r\n                                        fontSize: \"24px\",\r\n                                        textAlign: \"center\",\r\n                                        letterSpacing: \"2px\",\r\n                                        marginBottom: \"-0.6rem\",\r\n                                        marginTop: \"1.3rem\",\r\n                                    }}\r\n                                >\r\n                                    Upcoming Tasks\r\n                                </span>\r\n                            ) : (\r\n                                \"\"\r\n                            )}\r\n                            {tasks\r\n                                .filter((task) => !!task.upcoming)\r\n                                .map((task, index) => (\r\n                                    <TaskCard\r\n                                        setBalance={setBalance}\r\n                                        balance={balance}\r\n                                        tasks={tasks}\r\n                                        setTasks={setTasks}\r\n                                        setSnackBar={setSnackBar}\r\n                                        key={index}\r\n                                        axios={axios}\r\n                                        task={task}\r\n                                        setUpgradeDrawer={setUpgradeDrawer}\r\n                                        colors={colors}\r\n                                        theme={theme}\r\n                                        friendLength={friendLength}\r\n                                    />\r\n                                ))}\r\n                        </Grid>\r\n                    </Paper>\r\n                </Fade>\r\n                <SwipeableDrawer\r\n                    keepMounted\r\n                    PaperProps={{\r\n                        sx: {\r\n                            background: grey[900],\r\n                            borderRadius: \"12px 12px 0 0\",\r\n                            boxShadow: `0 -3px 18px rgb(${colors[theme]})`,\r\n                            borderTop: `1px solid rgb(${colors[theme]})`,\r\n                            textAlign: \"center\",\r\n                            padding: \"5px\",\r\n                            paddingBottom: \"0px\",\r\n                        },\r\n                    }}\r\n                    slotProps={{\r\n                        backdrop: {\r\n                            sx: { bgcolor: \"rgba(15, 15, 15, .90)\" },\r\n                        },\r\n                    }}\r\n                    anchor=\"bottom\"\r\n                    sx={{ zIndex: 999999 }}\r\n                    allowSwipeInChildren={true}\r\n                    disableSwipeToOpen={true}\r\n                    open={upgradeDrawer[0]}\r\n                    onOpen={() => {}}\r\n                    title=\"Upgrade\"\r\n                    onClose={() => {\r\n                        setUpgradeDrawer([false, <></>]);\r\n                    }}\r\n                >\r\n                    {upgradeDrawer[1]}\r\n                </SwipeableDrawer>\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Tasks;\r\n"],"names":["createSvgIcon","_jsx","d","_ref","task","axios","theme","friendLength","setSnackBar","tasks","setTasks","setUpgradeDrawer","setBalance","balance","loading","setLoading","useState","mapped_tasks","Grid","xs","marginTop","display","justifyContent","children","container","rowGap","columnGap","maxWidth","alignItems","prize","map","item","index","width","padding","className","level","sx","backgroundImage","backgroundRepeat","backgroundPosition","backgroundSize","backgroundOrigin","imageRendering","filter","WebkitFilter","_jsxs","Box","height","zIndex","src","alt","style","fontFamily","textAlign","letterSpacing","textDecoration","color","grey","format","toLocaleString","hidden","fontSize","length","description","type","LinearProgress","value","data","minimum","variant","Alert","icon","ErrorOutline","claimed","concat","onClick","post","id","then","_ref2","findIndex","newTasks","catch","error","_error$response","_error$response2","_error$response3","_error$response3$data","_error$response4","_error$response4$data","console","log","response","reset","status","message","finally","marginBottom","disabled","CircularProgress","marginLeft","number","Intl","NumberFormat","notation","compactDisplay","maximumSignificantDigits","colors","telegram","window","Telegram","WebApp","backdropFilter","WebkitBackdropFilter","borderRadius","background","boxShadow","upcoming","pixelated","image","title","openTelegramLink","url","openLink","TaskDrawerContent","fontWeight","transition","P","Particle","useMemo","Particles","options","upgradeDrawer","_Fragment","navigate","useNavigate","BackButton","show","hide","bottom","border","overflow","Slide","in","position","top","Paper","elevation","borderBottom","TypeAnimation","sequence","repeat","Infinity","speed","deletionSpeed","Fade","some","TaskCard","SwipeableDrawer","keepMounted","PaperProps","borderTop","paddingBottom","slotProps","backdrop","bgcolor","anchor","allowSwipeInChildren","disableSwipeToOpen","open","onOpen","onClose"],"sourceRoot":""}